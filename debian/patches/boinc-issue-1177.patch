From 31e8427469ede148249796fed05be0165e321d23 Mon Sep 17 00:00:00 2001
From: Christian Beer <christian.beer@aei.mpg.de>
Date: Thu, 16 Mar 2017 18:28:08 +0100
Subject: [PATCH 1/2] Manager/Lib: fix 'New Manager window' function on Linux

This was not working because the manager was not detecting its own executable name and path so it couldn't start a new instance of itself. Windows and Mac use different codepaths so it worked there.
The new library function can be extended for Windows and Mac to avoid code duplication.
---
 clientgui/BOINCGUIApp.cpp | 21 +++++++++++++++++++++
 configure.ac              |  5 +++++
 lib/util.cpp              | 17 +++++++++++++++++
 lib/util.h                |  2 ++
 4 files changed, 45 insertions(+)

Index: boinc/clientgui/BOINCGUIApp.cpp
===================================================================
--- boinc.orig/clientgui/BOINCGUIApp.cpp
+++ boinc/clientgui/BOINCGUIApp.cpp
@@ -765,6 +765,16 @@
 
     // Store the root directory for later use.
     m_strBOINCMGRExecutableName = pszProg;
+#elif defined(__WXGTK__)
+    char path[PATH_MAX];
+    if (!get_real_executable_path(path, PATH_MAX)) {
+        // find filename component
+        char* name = strrchr(path, '/');
+        if (name) {
+            name++;
+            m_strBOINCMGRExecutableName = name;
+        }
+    }
 #endif
 }
 
@@ -786,6 +796,17 @@
 
     // Store the root directory for later use.
     m_strBOINCMGRRootDirectory = szPath;
+#elif defined(__WXGTK__)
+    char path[PATH_MAX];
+    if (!get_real_executable_path(path, PATH_MAX)) {
+        // find path component
+        char* name = strrchr(path, '/');
+        if (name) {
+            name++;
+            *name = '\0';
+            m_strBOINCMGRRootDirectory = path;
+        }
+    }
 #endif
 }
 
Index: boinc/configure.ac
===================================================================
--- boinc.orig/configure.ac
+++ boinc/configure.ac
@@ -1026,6 +1026,11 @@
     AC_DEFINE(HAVE__PROC_SELF_STAT, 1, [Define to 1 if /proc/self/stat exists])
 fi
 
+dnl Check for /proc/self/exe (Linux)
+if test -e "/proc/self/exe"; then
+    AC_DEFINE(HAVE__PROC_SELF_EXE, 1, [Define to 1 if /proc/self/exe exists])
+fi
+
 dnl Check for /proc/meminfo (Linux)
 if test -e "/proc/meminfo"; then
     AC_DEFINE(HAVE__PROC_MEMINFO, 1, [Define to 1 if /proc/meminfo exists])
Index: boinc/lib/util.cpp
===================================================================
--- boinc.orig/lib/util.cpp
+++ boinc/lib/util.cpp
@@ -617,3 +617,24 @@
     cached = true;
     return z*cos(PI2*u2);
 }
+
+// determines the real path and filename of the current process
+// not the current working directory
+//
+int get_real_executable_path(char* path, size_t max_len) {
+#ifdef HAVE__PROC_SELF_EXE
+    int ret = readlink("/proc/self/exe", path, max_len);
+    if ( ret >= 0) {
+        path[ret] = '\0'; // readlink does not null terminate
+        return 0;
+    } else {
+#ifdef _USING_FCGI_
+        FCGI::perror("readlink");
+#else
+        perror("readlink");
+#endif
+        return ERR_PROC_PARSE;
+    }
+#endif
+    return ERR_NOT_IMPLEMENTED;
+}
Index: boinc/lib/util.h
===================================================================
--- boinc.orig/lib/util.h
+++ boinc/lib/util.h
@@ -110,6 +110,8 @@
 
 extern int wait_client_mutex(const char* dir, double timeout);
 
+extern int get_real_executable_path(char* path, size_t max_len);
+
 #ifdef GCL_SIMULATOR
 extern double simtime;
 #define time(x) ((int)simtime)
