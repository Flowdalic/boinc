Index: boinc/sched/pymw_assimilator.py
===================================================================
--- boinc.orig/sched/pymw_assimilator.py
+++ boinc/sched/pymw_assimilator.py
@@ -47,7 +47,7 @@
             else:
                 shutil.copy2(resultFullPath, dest)
                 self.logNormal("Result copied [%s]\n", resultName)
-        except Exception,msg:
+        except(Exception,msg):
             self.logCritical("Error copying output\n" + \
                              "  - Source: %s\n" + \
                              "  - Dest: %s\n" + 
Index: boinc/sched/start
===================================================================
--- boinc.orig/sched/start
+++ boinc/sched/start
@@ -1,4 +1,5 @@
 #!/usr/bin/env python
+from __future__ import print_function
 # -*- mode: python; python-indent: 4; -*-
 
 ## $Id$
@@ -209,14 +210,14 @@
     return boinc_project_path.project_path('stop_sched')
 
 def write_stop_daemons():
-    print >>open(get_stop_daemons_filename(),'w'), '<stop/>'
+    print('<stop/>',file=open(get_stop_daemons_filename(),'w'))
 
 def remove_stop_daemons():
     if os.path.exists(get_stop_daemons_filename()):
         os.unlink(get_stop_daemons_filename())
 
 def write_stop_sched():
-    print >>open(get_stop_sched_filename(),'w'), '<stop/>'
+    print('<stop/>',file=open(get_stop_sched_filename(),'w'))
 
 def remove_stop_sched():
     if os.path.exists(get_stop_sched_filename()):
@@ -226,12 +227,12 @@
     try:
         os.unlink(filename)
     except OSError, e:
-        print "Couldn't unlink %s:"%filename,e
+        print("Couldn't unlink %s:"%filename,e)
 
 def remove_cached_home_page():
     path = boinc_project_path.project_path('html/cache/65/index.php')
     if os.path.exists(path):
-        print 'removing ' + path
+        print('removing ' + path)
         safe_unlink(path)
 
 def redirect(stdout='/dev/null', stderr=None, stdin='/dev/null'):
@@ -297,7 +298,7 @@
     return 0
 
 def write_pid_file(pidfile):
-    print >>open(pidfile,'w'), os.getpid()
+    print(os.getpid(),file=open(pidfile,'w'))
 
 def is_pid_running(pid):
     try:
@@ -362,9 +363,9 @@
         else:
             os.execvp( args[0], args )
         # on success we don't reach here
-        print >>sys.stderr, "Couldn't exec '%s'"%command
+        print("Couldn't exec '%s'"%command,sys.stderr)
     except OSError, e:
-        print >>sys.stderr, "Couldn't execute '%s':" %command, e
+        print("Couldn't execute '%s':" %command, e, file=sys.stderr)
     os._exit(1)
 
 def lookup_task_run_state(task):
@@ -419,21 +420,21 @@
     task_run_state = lookup_task_run_state(task)
     if not time_to_run_task(task, task_run_state):
         if verbose:
-            print "  Not running task because not time yet:",task.cmd
+            print("  Not running task because not time yet:",task.cmd)
         return
     if verbose:
-        print "  Running task:", task.cmd
+        print("  Running task:", task.cmd)
     update_task_timestamp(task_run_state)
     # we don't need the full double-fork because this should finish quickly
     if fork() > 0: return
     if lock_file(get_task_lock_name(task)):
         if verbose:
-            print >>sys.stderr, "    Task currently running! (%s)"%task.cmd
+            print("    Task currently running! (%s)"%task.cmd,file=sys.stderr)
         sys.exit(0)
     if get_task_use_shell(task):
-        print >>sys.stderr, "    Using shell encapsulation for: ",task.cmd
+        print("    Using shell encapsulation for: ",task.cmd,file=sys.stderr)
     elif contains_shell_characters(task.cmd):
-        print >>sys.stderr, "    Couldn't start: ",task.cmd, " <use_shell> is required but was not specified"
+        print("    Couldn't start: ",task.cmd, " <use_shell> is required but was not specified",file=sys.stderr)
         sys.exit(1)
     redirect(get_task_output_name(task))
     exec_command_string(task.cmd, get_task_use_shell(task))
@@ -443,25 +444,25 @@
     if double_fork() > 0: return
     if lock_file(get_task_lock_name(task)):
         if verbose:
-            print >>sys.stderr, "  Daemon already running: ",task.cmd
+            print("  Daemon already running: ",task.cmd,file=sys.stderr)
         sys.exit(0)
     if verbose or ( verbose_daemon_run and not get_daemon_silent_start(task) ):
-        print "  Starting daemon:", task.cmd
+        print("  Starting daemon:", task.cmd)
         sys.stdout.flush()
     if get_task_use_shell(task):
-        print >>sys.stderr, "  Using shell encapsulation for: ",task.cmd
+        print("  Using shell encapsulation for: ",task.cmd,file=sys.stderr)
     elif contains_shell_characters(task.cmd):
-        print >>sys.stderr, "  Couldn't start: ",task.cmd, " <use_shell> is required but was not specified"
+        print("  Couldn't start: ",task.cmd, " <use_shell> is required but was not specified",file=sys.stderr)
         sys.exit(1)
     redirect(get_daemon_output_name(task))
     write_pid_file(get_daemon_pid_name(task))
-    print "[%s] Executing command:"%timestamp(), task.cmd
+    print("[%s] Executing command:"%timestamp(), task.cmd)
     sys.stdout.flush()
     exec_command_string(task.cmd, get_task_use_shell(task))
 
 def run_daemons():
     found_any = False
-    if verbose: print "Starting daemons"
+    if verbose: print("Starting daemons")
     remove_stop_daemons()
     for task in config.daemons:
         if task.host != local_hostname:
@@ -473,7 +474,7 @@
     return found_any
 
 def run_tasks():
-    if verbose: print "Running tasks"
+    if verbose: print("Running tasks")
     prepare_run_state_pruning()
     for task in config.tasks:
         if task.host != local_hostname:
@@ -511,17 +512,17 @@
         os.kill(pid, signal.SIGHUP)
     except OSError, e:
         if e.errno != 3:
-            print >>sys.stderr, "Warning: couldn't kill pid %d:"%pid, e
+            print("Warning: couldn't kill pid %d:"%pid, e, file=sys.stderr)
         return 0
     if verbose:
-        print "  Killed process", pid
+        print("  Killed process", pid)
     return 1
 
 def wait_for_process_to_end(pid):
     '''if process is still running, wait for it to end.'''
     if is_pid_running(pid):
         if verbose:
-            print "  Waiting for process",pid,"to end: ",
+            print("  Waiting for process",pid,"to end: ")
             sys.stdout.flush()
         while is_pid_running(pid):
             if verbose:
@@ -529,10 +530,10 @@
                 sys.stdout.flush()
             time.sleep(.5)
         if verbose:
-            print ' ok'
+            print(' ok')
 
 def stop_daemons():
-    if verbose: print "Stopping all daemons"
+    if verbose: print("Stopping all daemons")
     write_stop_daemons()
     pid_files = glob.glob(os.path.join(pid_dir, '*.pid'))
     count = 0
@@ -544,7 +545,7 @@
         wait_for_process_to_end(pid)
     if verbose:
         if not count:
-            print "  (No processes stopped)"
+            print("  (No processes stopped)")
 
 
 ######################################################################
@@ -552,20 +553,20 @@
 def command_enable_start():
     if verbose:
         if run_state.enabled:
-            print "Staying in ENABLED mode"
+            print("Staying in ENABLED mode")
         else:
-            print "Entering ENABLED mode"
+            print("Entering ENABLED mode")
     # NOTE: must use '1', not '0' here
     run_state.enabled = 1
     found_any = run_daemons()
     if not found_any:
-        print "No daemons for this host found - check host name in config.xml"
+        print("No daemons for this host found - check host name in config.xml")
     time.sleep(10)      # give feeder time to start up and create shmem
     remove_stop_sched()
     remove_cached_home_page()
 
 def command_cron_start():
-    if verbose: print "Verbose cron-start: status ==", (run_state.enabled and 'ENABLED' or 'DISABLED')
+    if verbose: print("Verbose cron-start: status ==", (run_state.enabled and 'ENABLED' or 'DISABLED'))
     global verbose_daemon_run
     if run_state.enabled:
         verbose_daemon_run = 1
@@ -576,15 +577,15 @@
         run_tasks()
 
 def command_tasks_start():
-    if verbose: print "Verbose cron-start: status ==", (run_state.enabled and 'ENABLED' or 'DISABLED')
+    if verbose: print("Verbose cron-start: status ==", (run_state.enabled and 'ENABLED' or 'DISABLED'))
     run_tasks()
 
 def command_disable_stop():
     if verbose:
         if run_state.enabled:
-            print "Entering DISABLED mode"
+            print("Entering DISABLED mode")
         else:
-            print "Staying in DISABLED mode"
+            print("Staying in DISABLED mode")
     run_state.enabled = 0
     write_stop_sched()  # do this before stop_daemons(),
                         # else scheduler will complained about no shared mem
@@ -593,12 +594,12 @@
 
 def command_status():
     if run_state.enabled:
-        print "BOINC is ENABLED"
+        print("BOINC is ENABLED")
     else:
-        print "BOINC is DISABLED"
+        print("BOINC is DISABLED")
     if verbose:
-        print
-        print "DAEMON  pid  status      lockfile disabled  commandline"
+        print()
+        print("DAEMON  pid  status      lockfile disabled  commandline")
         n = 0
         for task in config.daemons:
             if task.host != local_hostname:
@@ -621,9 +622,9 @@
             else:
                 d = " no     "
 
-            print "  %2d"%n, " %5d"%pid, rs, lu, d, " ", task.cmd
-        print
-        print "TASK       last run       period          next run        lock file disabled  commandline"
+            print("  %2d"%n, " %5d"%pid, rs, lu, d, " ", task.cmd)
+        print()
+        print("TASK       last run       period          next run        lock file disabled  commandline")
         n = 0
         for task in config.tasks:
             if task.host != local_hostname:
@@ -643,8 +644,8 @@
                 d = " yes    "
             else:
                 d = " no     "
-            print "  %2d"%n, last_run.center(20), task.period.ljust(10), \
-                  next_run.center(20), lu, d, " ", task.cmd
+            print("  %2d"%n, last_run.center(20), task.period.ljust(10), \
+                  next_run.center(20), lu, d, " ", task.cmd)
         pass
 
 def command_show_config():
@@ -667,8 +668,8 @@
     command = None
 
 def help():
-    print >>sys.stderr, "Syntax: %s [options] [command]" % sys.argv[0]
-    print >>sys.stderr, """   Starts or stops BOINC daemons and tasks.
+    print(file=sys.stderr, "Syntax: %s [options] [command]" % sys.argv[0])
+    print(file=sys.stderr, """   Starts or stops BOINC daemons and tasks.
 
 Commands:
    --enable  (-e)     Set BOINC to ENABLED mode and start daemons
@@ -690,13 +691,13 @@
    --fork-delay=      Seconds to sleep between daemon forks instead of 0.1
    --ignore-timestamps    Ignore timestamps; for cron mode, runs all tasks now
    --prune-run-state  Delete unused timestamps in run_state.xml
-"""
+""")
     if program_name == 'start':
-        print >>sys.stderr, "Based on the invocation name as `start', the default action is --enable."
+        print(file=sys.stderr, "Based on the invocation name as `start', the default action is --enable.")
     elif program_name == 'stop':
-        print >>sys.stderr, "Based on the invocation name as `stop', the default action is --disable."
+        print(file=sys.stderr, "Based on the invocation name as `stop', the default action is --disable.")
     elif program_name == 'status':
-        print >>sys.stderr, "Based on the invocation name as `status', the default action is --status."
+        print(file=sys.stderr, "Based on the invocation name as `status', the default action is --status.")
     sys.exit(1)
 
 config_filename = boinc_project_path.config_xml_filename
@@ -712,9 +713,9 @@
                                 'config-file=', 'run-state-file=',
                                 'prune-run-state',
                                 'quiet', 'verbose', 'help'))
-except Exception, e:
-    print >>sys.stderr, e
-    print >>sys.stderr, "Use '%s --help' for help" % sys.argv[0]
+except(Exception, e):
+    print(file=sys.stderr, e)
+    print(file=sys.stderr, "Use '%s --help' for help" % sys.argv[0])
     sys.exit(1)
 for opt,v in opts:
     if opt == '-q' or opt == '--quiet':
@@ -787,7 +788,7 @@
 
 start_lockfile = os.path.join(pid_dir, 'start.lock.'+local_hostname)
 if lock_file(start_lockfile):
-    print >>sys.stderr, "start is currently running!"
+    print(file=sys.stderr, "start is currently running!")
     sys.exit(1)
 
 assign_task_defaults()
@@ -807,7 +808,7 @@
         remote_cmd = [ ssh, host, 'cd', cwd, ' && ', cmd ] + sys.argv[1:]
         if verbose:
             remote_cmd += [ '-v' ]
-            print 'running ', ' '.join(remote_cmd)
+            print('running ', ' '.join(remote_cmd))
         os.spawnvp(wait_mode, remote_cmd[0], remote_cmd)
 
 os.unlink(start_lockfile)
Index: boinc/py/Boinc/add_util.py
===================================================================
--- boinc.orig/py/Boinc/add_util.py
+++ boinc/py/Boinc/add_util.py
@@ -1,4 +1,5 @@
 #!/usr/bin/env python
+from __future__ import print_function
 
 # $Id$
 
@@ -130,7 +131,7 @@
     if len(results) > 1:
         print('Too many %ss match "%s": '%(arg,value), sys.stderr)
         for result in results:
-            print ('   '+result.name, sys.stderr)
+            print('   '+result.name, sys.stderr)
         raise SystemExit
     return results[0]
 
@@ -159,7 +160,7 @@
     check_required_arguments(add_object, args_dict)
     dbobject = add_object.DatabaseObject(**args_dict)
     print("Processing"+dbobject+"...")
-    # print "Commiting", dbobject, "with args:"
+    # print("Commiting", dbobject, "with args:")
     # pprint.pprint(dbobject.__dict__)
     try:
         dbobject.commit()
Index: boinc/py/Boinc/boincxml.py
===================================================================
--- boinc.orig/py/Boinc/boincxml.py
+++ boinc/py/Boinc/boincxml.py
@@ -1,4 +1,5 @@
 #!/usr/bin/env python
+from __future__ import print_function
 
 # $Id$
 
Index: boinc/py/Boinc/db_base.py
===================================================================
--- boinc.orig/py/Boinc/db_base.py
+++ boinc/py/Boinc/db_base.py
@@ -1,4 +1,5 @@
 ## $Id$
+from __future__ import print_function
 
 # quarl 2003-10-16 initial version based on conglomeration of
 #                  coursesurvey/database.py and boinc/database.py
Index: boinc/py/Boinc/setup_project.py
===================================================================
--- boinc.orig/py/Boinc/setup_project.py
+++ boinc/py/Boinc/setup_project.py
@@ -1,4 +1,5 @@
 ## $Id$
+from __future__ import print_function
 
 # module for setting up a new project (either a real project or a test project
 # see tools/makeproject, test/testbase.py).
Index: boinc/py/Boinc/configxml.py
===================================================================
--- boinc.orig/py/Boinc/configxml.py
+++ boinc/py/Boinc/configxml.py
@@ -1,4 +1,5 @@
 #!/usr/bin/env python
+from __future__ import print_function
 
 # $Id$
 
@@ -10,8 +11,8 @@
 USAGE:     from Boinc import configxml
            config = configxml.ConfigFile().read()
            run_state = configxml.RunStateFile().read()
-           print config.config.db_name
-           print config.tasks[4].cmd
+           print(config.config.db_name)
+           print(config.tasks[4].cmd)
            run_state.enabled = True
            new_task = newConfigDict()
            new_task.cmd = "echo hi | mail quarl"
Index: boinc/py/Boinc/database.py
===================================================================
--- boinc.orig/py/Boinc/database.py
+++ boinc/py/Boinc/database.py
@@ -1,4 +1,5 @@
 ## $Id$
+from __future__ import print_function
 
 '''
 Defines database backend library and database table and object relationships.
@@ -17,7 +18,7 @@
 wu_dead = database.Workunits.find(name="dead.wu")[0]
 results_dead = database.Results.find(wu=wu_dead)
 for result in results_dead:
-    print "Removing from db:", result
+    print("Removing from db:", result)
     os.system("echo oeps | mail %s" % result.host.user.email_addr)
     result.remove()
 
Index: boinc/py/Boinc/db_mid.py
===================================================================
--- boinc.orig/py/Boinc/db_mid.py
+++ boinc/py/Boinc/db_mid.py
@@ -1,9 +1,10 @@
 ## $Id$
+from __future__ import print_function
 
 ## database middle-end.  This file is not required for normal database use.
 ## it is useful for debugging scripts; e.g.
 ##
-##    print database.Users[1]
+##    print(database.Users[1])
 ##
 ## will look prettier if you import this module.
 
