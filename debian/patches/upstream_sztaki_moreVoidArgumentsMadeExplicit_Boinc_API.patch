Author: SZTAKI developers
Description: Just some coding style.
Disclaimer: Part of some past motivation to bring the SZTAKI and official BOINC trees closer together.
Index: boinc/api/boinc_api.h
===================================================================
--- boinc.orig/api/boinc_api.h	2011-06-12 21:03:24.000000000 +0200
+++ boinc/api/boinc_api.h	2011-06-12 21:04:46.000000000 +0200
@@ -71,7 +71,7 @@
     int network_suspended;
 } BOINC_STATUS;
 
-typedef void (*FUNC_PTR)();
+typedef void (*FUNC_PTR)(void);
 
 struct APP_INIT_DATA;
 
@@ -87,13 +87,13 @@
 extern int boinc_suspend_other_activities(void);
 extern int boinc_resume_other_activities(void);
 extern int boinc_report_app_status(double, double, double);
-extern int boinc_time_to_checkpoint();
-extern void boinc_begin_critical_section();
-extern int boinc_try_critical_section();
-extern void boinc_end_critical_section();
-extern void boinc_need_network();
-extern int boinc_network_poll();
-extern void boinc_network_done();
+extern int boinc_time_to_checkpoint(void);
+extern void boinc_begin_critical_section(void);
+extern int boinc_try_critical_section(void);
+extern void boinc_end_critical_section(void);
+extern void boinc_need_network(void);
+extern int boinc_network_poll(void);
+extern void boinc_network_done(void);
 extern int boinc_is_standalone(void);
 extern void boinc_ops_per_cpu_sec(double fp, double integer);
 extern void boinc_ops_cumulative(double fp, double integer);
@@ -101,10 +101,10 @@
 extern int boinc_receive_trickle_down(char* buf, int len);
 extern int boinc_init_options(BOINC_OPTIONS*);
 extern int boinc_get_status(BOINC_STATUS*);
-extern double boinc_get_fraction_done();
+extern double boinc_get_fraction_done(void);
 extern void boinc_register_timer_callback(FUNC_PTR);
-extern double boinc_worker_thread_cpu_time();
-extern int boinc_init_parallel();
+extern double boinc_worker_thread_cpu_time(void);
+extern int boinc_init_parallel(void);
 
 #ifdef __APPLE__
 extern int setMacPList(void);
@@ -123,7 +123,7 @@
 extern int boinc_resolve_filename_s(const char*, std::string&);
 extern int boinc_get_init_data(APP_INIT_DATA&);
 extern int boinc_wu_cpu_time(double&);
-extern double boinc_elapsed_time();
+extern double boinc_elapsed_time(void);
 extern int boinc_upload_file(std::string& name);
 extern int boinc_upload_status(std::string& name);
 extern char* boinc_msg_prefix(char*, int);
@@ -138,7 +138,7 @@
 extern HANDLE worker_thread_handle;
 #endif
 extern int boinc_init_options_general(BOINC_OPTIONS& opt);
-extern int start_timer_thread();
+extern int start_timer_thread(void);
 extern bool g_sleep;
 
 inline void boinc_options_defaults(BOINC_OPTIONS& b) {
Index: boinc/api/graphics_api.h
===================================================================
--- boinc.orig/api/graphics_api.h	2011-06-12 21:04:58.000000000 +0200
+++ boinc/api/graphics_api.h	2011-06-12 21:05:14.000000000 +0200
@@ -22,7 +22,7 @@
 extern "C" {
 #endif
 
-typedef void (*WORKER_FUNC_PTR)();
+typedef void (*WORKER_FUNC_PTR)(void);
 
 extern int boinc_init_graphics(WORKER_FUNC_PTR);
 
@@ -40,8 +40,8 @@
 extern void boinc_app_mouse_move(int x, int y, int left, int middle, int right);
 extern void boinc_app_key_press(int, int);
 extern void boinc_app_key_release(int, int);
-extern void boinc_suspend_graphics_thread();
-extern void boinc_resume_graphics_thread();
+extern void boinc_suspend_graphics_thread(void);
+extern void boinc_resume_graphics_thread(void);
 
 // C++ API follows here 
 #ifdef __cplusplus
@@ -50,7 +50,7 @@
 #include "boinc_api.h"
 
 extern int boinc_init_options_graphics(BOINC_OPTIONS&, WORKER_FUNC_PTR);
-extern bool boinc_graphics_possible();
+extern bool boinc_graphics_possible(void);
 
 // Implementation stuff
 //
