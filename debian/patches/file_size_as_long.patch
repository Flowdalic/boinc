Description: Never applied.
Index: boinc/client/app.cpp
===================================================================
--- boinc.orig/client/app.cpp	2012-01-14 13:00:51.000000000 +0100
+++ boinc/client/app.cpp	2012-02-12 21:54:51.000000000 +0100
@@ -427,7 +427,7 @@
 // size of output files and files in slot dir
 //
 int ACTIVE_TASK::current_disk_usage(double& size) {
-    double x;
+    off_t x;
     unsigned int i;
     int retval;
     FILE_INFO* fip;
@@ -439,7 +439,7 @@
         fip = result->output_files[i].file_info;
         get_pathname(fip, path, sizeof(path));
         retval = file_size(path, x);
-        if (!retval) size += x;
+        if (!retval) size += (double)x;
     }
     return 0;
 }
Index: boinc/client/cs_apps.cpp
===================================================================
--- boinc.orig/client/cs_apps.cpp	2011-10-30 00:27:06.000000000 +0200
+++ boinc/client/cs_apps.cpp	2012-02-12 21:56:12.000000000 +0100
@@ -102,7 +102,7 @@
     unsigned int i;
     char path[256];
     int retval;
-    double size;
+    off_t size;
 
     // scan the output files, check if missing or too big.
     // Don't bother doing this if result was aborted via GUI or by project
Index: boinc/client/file_xfer.cpp
===================================================================
--- boinc.orig/client/file_xfer.cpp	2012-02-03 21:33:49.000000000 +0100
+++ boinc/client/file_xfer.cpp	2012-02-12 22:02:35.000000000 +0100
@@ -239,7 +239,7 @@
     bool action = false;
     static double last_time=0;
     char pathname[256];
-    double size;
+    off_t size;
 
     if (gstate.now - last_time < FILE_XFER_POLL_PERIOD) return false;
     last_time = gstate.now;
@@ -309,7 +309,7 @@
         if (!fxp->is_upload) {
             get_pathname(fxp->fip, pathname, sizeof(pathname));
             if (file_size(pathname, size)) continue;
-            double diff = size - fxp->starting_size;
+            off_t diff = size - fxp->starting_size;
             if (fxp->http_op_retval == 0) {
                 // If no HTTP error,
                 // see if we read less than 5 KB and file is incomplete.
Index: boinc/client/file_xfer.h
===================================================================
--- boinc.orig/client/file_xfer.h	2011-03-17 18:51:03.000000000 +0100
+++ boinc/client/file_xfer.h	2012-02-12 21:58:03.000000000 +0100
@@ -37,7 +37,7 @@
     char header[4096];
     bool file_size_query;
     bool is_upload;
-    double starting_size;
+    off_t starting_size;
         // File size at start of transfer, used for:
         // 1) a "minimum download increment"
         // that rejects partial downloads of less than 5K,
Index: boinc/client/http_curl.cpp
===================================================================
--- boinc.orig/client/http_curl.cpp	2012-02-03 21:33:49.000000000 +0100
+++ boinc/client/http_curl.cpp	2012-02-12 22:03:23.000000000 +0100
@@ -303,7 +303,7 @@
     PROJECT* p, const char* url, const char* in, const char* out
 ) {
     int retval;
-    double size;
+    off_t size;
 
     req1 = NULL;  // not using req1, but init_post2 uses it
 
Index: boinc/client/pers_file_xfer.h
===================================================================
--- boinc.orig/client/pers_file_xfer.h	2011-12-15 20:51:06.000000000 +0100
+++ boinc/client/pers_file_xfer.h	2012-02-12 22:00:06.000000000 +0100
@@ -95,7 +95,7 @@
     double last_time;
         // when the above was last updated.
         // Defined only while a transfer is active
-    double last_bytes_xferred;
+    off_t last_bytes_xferred;
         // Save how much is transferred when transfer isn't active, used
         // to display progress in GUI.
     bool pers_xfer_done;
Index: boinc/lib/diagnostics.cpp
===================================================================
--- boinc.orig/lib/diagnostics.cpp	2011-10-30 00:27:06.000000000 +0200
+++ boinc/lib/diagnostics.cpp	2012-02-12 21:52:39.000000000 +0100
@@ -501,7 +501,7 @@
 // Cycle the log files at regular events.
 //
 int diagnostics_cycle_logs() {
-    double f_size;
+    off_t i_size;
 
     fflush(stdout);
     fflush(stderr);
@@ -513,11 +513,11 @@
         // OS/2 can't stat() open files!
         struct stat sbuf;
         fstat(fileno(stderr_file), &sbuf);
-        f_size = (double)sbuf.st_size;
+        i_size = sbuf.st_size;
 #else
-        file_size(stderr_log, f_size);
+        file_size(stderr_log, i_size);
 #endif
-        if (f_size > max_stderr_file_size) {
+        if (i_size > max_stderr_file_size) {
             if (NULL == stderr_file) return ERR_FOPEN;
             fclose(stderr_file);
             boinc_copy(stderr_log, stderr_archive);
@@ -531,11 +531,11 @@
         // OS/2 can't stat() open files!
         struct stat sbuf;
         fstat(fileno(stdout_file), &sbuf);
-        f_size = (double)sbuf.st_size;
+        i_size = sbuf.st_size;
 #else
-        file_size(stdout_log, f_size);
+        file_size(stdout_log, i_size);
 #endif
-        if (f_size > max_stdout_file_size) {
+        if (i_size > max_stdout_file_size) {
             if (NULL == stdout_file) return ERR_FOPEN;
             fclose(stdout_file);
             boinc_copy(stdout_log, stdout_archive);
Index: boinc/lib/filesys.cpp
===================================================================
--- boinc.orig/lib/filesys.cpp	2012-01-16 22:23:26.000000000 +0100
+++ boinc/lib/filesys.cpp	2012-02-12 21:41:11.000000000 +0100
@@ -316,6 +316,16 @@
 
 // get file size
 //
+int file_size(const char* const path, off_t& size) {
+    struct stat sbuf;
+    int retval;
+
+    retval = stat(path, &sbuf);
+    if (retval) return ERR_NOT_FOUND;
+    size = sbuf.st_size;
+    return 0;
+}
+
 int file_size(const char* path, double& size) {
     struct stat sbuf;
     int retval;
@@ -403,7 +413,7 @@
     char filename[1024], subdir[1024];
     int retval=0;
     DIRREF dirp;
-    double x;
+    off_t x;
 
     size = 0;
     dirp = dir_open(dirpath);
Index: boinc/lib/filesys.h
===================================================================
--- boinc.orig/lib/filesys.h	2011-12-02 02:55:55.000000000 +0100
+++ boinc/lib/filesys.h	2012-02-12 21:39:41.000000000 +0100
@@ -71,7 +71,8 @@
 /* C++ specific prototypes/defines follow here */
 #ifdef __cplusplus
 
-extern int file_size(const char*, double&);
+extern int file_size(const char const* path, off_t& size);
+extern int file_size(const char* path, double& size);
 extern int clean_out_dir(const char*);
 extern int dir_size(const char* dirpath, double&, bool recurse=true);
 extern int get_filesystem_info(double& total, double& free, char* path=const_cast<char *>("."));
