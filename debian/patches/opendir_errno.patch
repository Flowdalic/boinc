--- a/client/check_security.cpp
+++ b/client/check_security.cpp
@@ -35,9 +35,9 @@
 #endif
 
 static int CheckNestedDirectories(
-    char * basepath, int depth, 
+    const char * const basepath, int depth,
     int use_sandbox, int isManager, 
-    char * path_to_error,
+    const char * const path_to_error,
     int len
 );
 
@@ -491,9 +491,9 @@
 
 
 static int CheckNestedDirectories(
-    char * basepath, int depth,
+    const char * const basepath, int depth,
     int use_sandbox, int isManager, 
-    char * path_to_error, int len
+    const char * const path_to_error, int len
 ) {
     int             isDirectory;
     char            full_path[MAXPATHLEN];
@@ -503,6 +503,7 @@
     dirent          *dp;
     static int      errShown = 0;
 
+    errno=0;
     dirp = opendir(basepath);
     if (dirp == NULL) {
         // Ideally, all project-created subdirectories under project or slot 
@@ -512,6 +513,7 @@
         // the subdirectory to check them.
         strlcpy(full_path, basepath, sizeof(full_path));
         if ((depth > 1) && (errno == EACCES)) {
+            fprintf(stderr,"Could not open directory %s in client/check_security.cpp: CheckNestedDirectories: %s\n",full_path,strerror(errno));
             return 0;
         } else {
             retval = -1200;
--- a/client/cs_platforms.cpp
+++ b/client/cs_platforms.cpp
@@ -44,6 +44,7 @@
 #include <sys/sysctl.h>
 #endif
 
+#include <cerrno>
 #include "error_numbers.h"
 #include "filesys.h"
 #include "str_util.h"
@@ -174,9 +175,17 @@
                 int i;
                 for (i=0; i < nlibdirs; i++) {
                     struct dirent *entry;
+                    errno=0;
                     DIR *a = opendir(libdir[i]);
-                    // if dir doesn't exist, do the next one
-                    if (a == 0) continue;
+                    if (a == 0) {
+                      if (ENOENT==errno) {
+                          // if dir doesn't exist, do to the next one
+                       }
+                      else {
+                         fprintf(stderr,"Unexpected problem with directory '%s': %s\n",libdir[i],strerror(errno));
+                      }
+                      continue;
+                   }
                     // dir exists. read each entry until you find a 32bit lib
                     while ((support32 == 0) && ((entry=readdir(a)) != 0)) {
                         strlcpy(cmdline, file[eno], 256);
