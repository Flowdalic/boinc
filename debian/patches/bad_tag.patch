Index: boinc/lib/gui_rpc_client_ops.cpp
===================================================================
--- boinc.orig/lib/gui_rpc_client_ops.cpp	2012-01-15 01:31:59.000000000 +0100
+++ boinc/lib/gui_rpc_client_ops.cpp	2012-01-15 01:45:07.000000000 +0100
@@ -1871,19 +1871,19 @@
 
     retval = rpc.do_rpc(buf);
     if (!retval) {
-        while (rpc.fin.fgets(buf, 256)) {
-            if (match_tag(buf, "</msgs>")) {
+        while (!rpc.xp.get_tag()) {
+            if (rpc.xp.match_tag("/msgs")) {
                 return 0;
             }
-            if (match_tag(buf, "<msg>")) {
+            if (rpc.xp.match_tag("msg")) {
                 MESSAGE* message = new MESSAGE();
                 message->parse(rpc.xp);
                 msgs.messages.push_back(message);
                 continue;
             }
-            if (match_tag(buf, "<boinc_gui_rpc_reply>")) continue;
-            if (match_tag(buf, "<msgs>")) continue;
-            fprintf(stderr, "bad tag %s\n", buf);
+            if (rpc.xp.match_tag("boinc_gui_rpc_reply")) continue;
+            if (rpc.xp.match_tag("msgs")) continue;
+            //fprintf(stderr, "bad tag '%s'\n", buf);
         }
     }
     return retval;
Index: boinc/lib/parse.cpp
===================================================================
--- boinc.orig/lib/parse.cpp	2012-01-15 01:31:59.000000000 +0100
+++ boinc/lib/parse.cpp	2012-01-15 01:45:07.000000000 +0100
@@ -90,7 +90,6 @@
 // Use "<tag", not "<tag>", if there might be attributes
 //
 bool parse_str(const char* buf, const char* tag, char* dest, int destlen) {
-    string str;
     const char* p;
     int len;
 
Index: boinc/lib/str_util.cpp
===================================================================
--- boinc.orig/lib/str_util.cpp	2012-01-15 01:31:59.000000000 +0100
+++ boinc/lib/str_util.cpp	2012-01-16 22:47:39.000000000 +0100
@@ -312,37 +312,39 @@
 // remove whitespace from start and end of a string
 //
 void strip_whitespace(char *str) {
-    int n;
-    while (1) {
-        if (!str[0]) break;
-        if (!isascii(str[0])) break;
-        if (!isspace(str[0])) break;
-        strcpy_overlap(str, str+1);
+
+    char *s=str;
+    while (*s) {
+        if (!isascii(*s)) break;
+        if (!isspace(*s)) break;
+	s++;
     }
-    while (1) {
-        n = (int)strlen(str);
-        if (n == 0) break;
-        if (!isascii(str[n-1])) break;
-        if (!isspace(str[n-1])) break;
-        str[n-1] = 0;
+    if (s != str) strcpy_overlap(str, s);
+
+    int n=strlen(str);
+    while(n>0) {
+        n--;
+        if (!isascii(str[n])) break;
+        if (!isspace(str[n])) break;
+        str[n] = 0;
     }
 }
 
 void strip_whitespace(string& str) {
-    int n;
     while (1) {
         if (str.length() == 0) break;
         if (!isascii(str[0])) break;
         if (!isspace(str[0])) break;
         str.erase(0, 1);
     }
-    while (1) {
-        n = (int)str.length();
-        if (n == 0) break;
+
+    int n = (int) str.length();
+    while (n>0) {
         if (!isascii(str[n-1])) break;
         if (!isspace(str[n-1])) break;
-        str.erase(n-1, 1);
+	n--;
     }
+    str.erase(n, str.length()-n);
 }
 
 char* time_to_string(double t) {
