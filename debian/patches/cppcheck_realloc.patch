Index: boinc/lib/parse.cpp
===================================================================
--- boinc.orig/lib/parse.cpp	2012-02-16 01:37:40.000000000 +0100
+++ boinc/lib/parse.cpp	2012-02-16 10:48:24.000000000 +0100
@@ -178,8 +178,21 @@
         }
         int n = (int)strlen(line);
         if (nused + n >= bufsize) {
-            bufsize *= 2;
-            buf = (char*)realloc(buf, bufsize);
+            char *b = (char*)realloc(buf, bufsize*2);
+            if (b) {
+                buf = b;
+                bufsize *= 2;
+            }
+            else {
+                b = (char*)realloc(buf, nused+n+2);
+		if (!b) {
+                   fprintf(stderr,"Ran out of memory.\n");
+                   free(buf);
+                   return ERR_XML_PARSE;
+		}
+               bufsize = nused+n+2;
+		buf = b;
+            }
         }
         strcpy(buf+nused, line);
         nused += n;
Index: boinc/lib/susp.cpp
===================================================================
--- boinc.orig/lib/susp.cpp	2012-02-16 01:37:40.000000000 +0100
+++ boinc/lib/susp.cpp	2012-02-16 10:48:24.000000000 +0100
@@ -185,12 +185,13 @@
 
     if (i >= bottom) {
 	bottom += 2;
-        array = (Victim_t*)realloc (
+        Victim_t *a= (Victim_t*)realloc (
             array, (bottom * sizeof (Victim_t)));
-        if (array == NULL) {
+        if (a == NULL) {
             pthread_mutex_unlock (&mut);
             return errno;
         }
+	array=a;
         array[bottom-1].inuse = 0;	/* Clear new last entry */
     }
 
Index: boinc/lib/crypt_prog.cpp
===================================================================
--- boinc.orig/lib/crypt_prog.cpp	2012-02-16 01:37:40.000000000 +0100
+++ boinc/lib/crypt_prog.cpp	2012-02-16 10:48:24.000000000 +0100
@@ -109,6 +109,7 @@
         die("can't open /dev/random\n");
     }
     fread(&n, sizeof(n), 1, f);
+    fclose(f);
 #endif
     return n;
 }
@@ -357,10 +358,10 @@
         } else {
             // o2b
             rsa_key_ = (RSA *)calloc(1, sizeof(RSA));
-            memset(rsa_key_, 0, sizeof(RSA));
             if (rsa_key_ == NULL) {
                 die("could not allocate memory for RSA structure.\n");
             }
+            //memset(rsa_key_, 0, sizeof(RSA)); // redundant (calloc initiates with 0, needs to move after if
             if (kpriv) {
                 fpriv = fopen (argv[4], "r");
                 rsa_key_ = PEM_read_RSAPrivateKey(fpriv, NULL, NULL, NULL);
Index: boinc/lib/diagnostics_win.cpp
===================================================================
--- boinc.orig/lib/diagnostics_win.cpp	2012-02-16 01:37:40.000000000 +0100
+++ boinc/lib/diagnostics_win.cpp	2012-02-16 10:59:49.000000000 +0100
@@ -329,8 +329,9 @@
 
     do {
         *ppBuffer = HeapAlloc(hHeap, HEAP_ZERO_MEMORY, *pcbBuffer);
-        if (ppBuffer == NULL) {
+        if (*ppBuffer == NULL) {
             retval = ERROR_NOT_ENOUGH_MEMORY;
+            return retval;
         }
 
         Status = pNTQSI(
@@ -1630,6 +1631,7 @@
             break;
         case EXCEPTION_ACCESS_VIOLATION:
             strcpy(status, "Access Violation");
+            substatus[0]=0;
             if (pExPtrs->ExceptionRecord->NumberParameters == 2) {
                 switch(pExPtrs->ExceptionRecord->ExceptionInformation[0]) {
                 case 0: // read attempt
Index: boinc/lib/crypt.cpp
===================================================================
--- boinc.orig/lib/crypt.cpp	2012-02-15 22:04:05.000000000 +0100
+++ boinc/lib/crypt.cpp	2012-02-16 10:54:04.000000000 +0100
@@ -339,6 +339,7 @@
     char clear_buf[MD5_LEN];
     int n, retval;
     DATA_BLOCK clear_signature;
+    clear_buf[0]=0;
 
     n = (int)strlen(md5_buf);
     clear_signature.data = (unsigned char*)clear_buf;
Index: boinc/lib/mac_address.cpp
===================================================================
--- boinc.orig/lib/mac_address.cpp	2012-02-16 10:48:24.000000000 +0100
+++ boinc/lib/mac_address.cpp	2012-02-16 11:01:27.000000000 +0100
@@ -115,7 +115,7 @@
 
                 CFDataGetBytes(refData, CFRangeMake(0,CFDataGetLength(refData)), MACAddress);
                 sprintf(buffer, "%s%s%02x:%02x:%02x:%02x:%02x:%02x",
-                        buffer, delimiter,
+                        "" /* was race condition: buffer */, delimiter,
                         MACAddress[0], MACAddress[1], MACAddress[2], MACAddress[3], MACAddress[4], MACAddress[5]);
                 CFRelease(MACAddressAsCFData);
                 delimiter[0] = ':';
