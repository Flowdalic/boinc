--- a/client/app.h
+++ b/client/app.h
@@ -47,7 +47,7 @@
 typedef int PROCESS_ID;
 
 #define MAX_STDERR_LEN  65536
-#define SLOT_DIR_LEN 256
+#define SLOT_DIR_LEN MAXPATHLEN
     // The stderr output of an application is truncated to this length
     // before sending to server,
     // to protect against apps that write unbounded amounts.
--- a/client/file_names.cpp
+++ b/client/file_names.cpp
@@ -69,7 +69,7 @@
 //
 void get_pathname(FILE_INFO* fip, char* path, int len) {
     PROJECT* p = fip->project;
-    char buf[MAXPATHLEN];
+    char buf[std::max(len,MAXPATHLEN)];
 
     // for testing purposes, it's handy to allow a FILE_INFO without
     // an associated PROJECT.
@@ -91,28 +91,28 @@
 }
 
 void get_sched_request_filename(PROJECT& project, char* buf, int len) {
-    char url[1024];
+    char url[std::max(len,MAXPATHLEN)];
 
     escape_project_url(project.master_url, url);
     snprintf(buf, len, "%s%s.xml", SCHED_OP_REQUEST_BASE, url);
 }
 
 void get_sched_reply_filename(PROJECT& project, char* buf, int len) {
-    char url[1024];
+    char url[std::max(len,MAXPATHLEN)];
 
     escape_project_url(project.master_url, url);
     snprintf(buf, len, "%s%s.xml", SCHED_OP_REPLY_BASE, url);
 }
 
 void get_master_filename(PROJECT& project, char* buf, int len) {
-    char url[1024];
+    char url[std::max(len,MAXPATHLEN)];
 
     escape_project_url(project.master_url, url);
     snprintf(buf, len, "%s%s.xml", MASTER_BASE, url);
 }
 
 void job_log_filename(PROJECT& project, char* buf, int len) {
-    char url[1024];
+    char url[std::max(len,MAXPATHLEN)];
 
     escape_project_url(project.master_url, url);
     snprintf(buf, len, "%s%s.txt", JOB_LOG_BASE, url);
@@ -220,7 +220,7 @@
 // delete unused stuff in the slots/ directory
 //
 void delete_old_slot_dirs() {
-    char filename[1024], path[MAXPATHLEN];
+    char filename[MAXPATHLEN], path[MAXPATHLEN];
     DIRREF dirp;
     int retval;
 
