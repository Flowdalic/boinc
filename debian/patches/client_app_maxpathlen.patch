--- a/client/app.h
+++ b/client/app.h
@@ -47,7 +47,7 @@
 typedef int PROCESS_ID;
 
 #define MAX_STDERR_LEN  65536
-#define SLOT_DIR_LEN 256
+#define SLOT_DIR_LEN MAXPATHLEN
     // The stderr output of an application is truncated to this length
     // before sending to server,
     // to protect against apps that write unbounded amounts.
--- a/client/file_names.cpp
+++ b/client/file_names.cpp
@@ -66,7 +66,7 @@
 }
 
 void get_project_dir(PROJECT* p, char* path, int len) {
-    char buf[1024];
+    char buf[std::max(len,MAXPATHLEN)];
     escape_project_url(p->master_url, buf);
     snprintf(path, len, "%s/%s", PROJECTS_DIR, buf);
 }
@@ -75,7 +75,7 @@
 //
 void get_pathname(FILE_INFO* fip, char* path, int len) {
     PROJECT* p = fip->project;
-    char buf[1024];
+    char buf[std::max(len,MAXPATHLEN)];
 
     // for testing purposes, it's handy to allow a FILE_INFO without
     // an associated PROJECT.
@@ -97,28 +97,28 @@
 }
 
 void get_sched_request_filename(PROJECT& project, char* buf, int len) {
-    char url[1024];
+    char url[std::max(len,MAXPATHLEN)];
 
     escape_project_url(project.master_url, url);
     snprintf(buf, len, "%s%s.xml", SCHED_OP_REQUEST_BASE, url);
 }
 
 void get_sched_reply_filename(PROJECT& project, char* buf, int len) {
-    char url[1024];
+    char url[std::max(len,MAXPATHLEN)];
 
     escape_project_url(project.master_url, url);
     snprintf(buf, len, "%s%s.xml", SCHED_OP_REPLY_BASE, url);
 }
 
 void get_master_filename(PROJECT& project, char* buf, int len) {
-    char url[1024];
+    char url[std::max(len,MAXPATHLEN)];
 
     escape_project_url(project.master_url, url);
     snprintf(buf, len, "%s%s.xml", MASTER_BASE, url);
 }
 
 void job_log_filename(PROJECT& project, char* buf, int len) {
-    char url[1024];
+    char url[std::max(len,MAXPATHLEN)];
 
     escape_project_url(project.master_url, url);
     snprintf(buf, len, "%s%s.txt", JOB_LOG_BASE, url);
@@ -133,7 +133,7 @@
 // Create the directory for the project p
 //
 int make_project_dir(PROJECT& p) {
-    char buf[1024];
+    char buf[MAXPATHLEN];
     int retval;
 
     boinc_mkdir(PROJECTS_DIR);
@@ -171,7 +171,7 @@
 }
 
 int remove_project_dir(PROJECT& p) {
-    char buf[1024];
+    char buf[MAXPATHLEN];
     int retval;
 
     get_project_dir(&p, buf, sizeof(buf));
@@ -186,7 +186,7 @@
 // Create the slot directory for the specified slot #
 //
 int make_slot_dir(int slot) {
-    char buf[1024];
+    char buf[MAXPATHLEN];
 
     if (slot<0) {
         msg_printf(NULL, MSG_INTERNAL_ERROR, "Bad slot number %d", slot);
@@ -230,7 +230,7 @@
 // delete unused stuff in the slots/ directory
 //
 void delete_old_slot_dirs() {
-    char filename[1024], path[MAXPATHLEN];
+    char filename[MAXPATHLEN], path[MAXPATHLEN];
     DIRREF dirp;
     int retval;
 
@@ -341,7 +341,7 @@
 }
 
 void boinc_version_dir(PROJECT& p, VERSION_INFO& vi, char* buf) {
-    char projdir[1024];
+    char projdir[MAXPATHLEN];
     get_project_dir(&p, projdir, sizeof(projdir));
     sprintf(buf, "%s/boinc_version_%d_%d_%d", projdir, vi.major, vi.minor, vi.release);
 }
