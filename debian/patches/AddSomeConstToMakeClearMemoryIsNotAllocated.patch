Author: Steffen Moeller <moeller@debian.org>
Description: Introduction of "const" flag. This patch is not applied.
Index: boinc/clientgui/ProjectListCtrl.cpp
===================================================================
--- boinc.orig/clientgui/ProjectListCtrl.cpp	2011-03-17 18:51:03.000000000 +0100
+++ boinc/clientgui/ProjectListCtrl.cpp	2011-11-13 23:34:52.000000000 +0100
@@ -60,7 +60,7 @@
 #endif
 
 // Gets the name of the specified object.
-wxAccStatus CProjectListCtrlAccessible::GetName(int childId, wxString* name)
+wxAccStatus CProjectListCtrlAccessible::GetName(int childId, wxString* const name) const
 {
     if (childId == wxACC_SELF)
     {
@@ -80,7 +80,7 @@
 
 // Can return either a child object, or an integer
 // representing the child element, starting from 1.
-wxAccStatus CProjectListCtrlAccessible::HitTest(const wxPoint& pt, int* childId, wxAccessible** /*childObject*/)
+wxAccStatus CProjectListCtrlAccessible::HitTest(const wxPoint& pt, int* childId, wxAccessible** const /*childObject*/)
 {
     CProjectListCtrl* pCtrl = wxDynamicCast(GetWindow(), CProjectListCtrl);
     if (pCtrl)
@@ -94,7 +94,7 @@
 
 
 // Returns the rectangle for this object (id = 0) or a child element (id > 0).
-wxAccStatus CProjectListCtrlAccessible::GetLocation(wxRect& rect, int elementId)
+wxAccStatus CProjectListCtrlAccessible::GetLocation(wxRect& rect, int elementId) const
 {
     CProjectListCtrl* pCtrl = wxDynamicCast(GetWindow(), CProjectListCtrl);
     if (pCtrl && (0 == elementId))
@@ -132,7 +132,7 @@
 
 
 // Gets the number of children.
-wxAccStatus CProjectListCtrlAccessible::GetChildCount(int* childCount)
+wxAccStatus CProjectListCtrlAccessible::GetChildCount(int* const childCount) const
 {
     CProjectListCtrl* pCtrl = wxDynamicCast(GetWindow(), CProjectListCtrl);
     if (pCtrl)
@@ -182,7 +182,7 @@
 
 
 // Returns the description for this object or a child.
-wxAccStatus CProjectListCtrlAccessible::GetDescription(int childId, wxString* description)
+wxAccStatus CProjectListCtrlAccessible::GetDescription(int childId, wxString* const description) const
 {
     CProjectListCtrl* pCtrl = wxDynamicCast(GetWindow(), CProjectListCtrl);
     if (pCtrl && (childId != wxACC_SELF))
@@ -275,7 +275,7 @@
 // The retrieved string describes the action that is performed on an object,
 // not what the object does as a result. For example, a toolbar button that prints
 // a document has a default action of "Press" rather than "Prints the current document."
-wxAccStatus CProjectListCtrlAccessible::GetDefaultAction(int childId, wxString* actionName)
+wxAccStatus CProjectListCtrlAccessible::GetDefaultAction(int childId, wxString* const actionName) const
 {
     CProjectListCtrl* pCtrl = wxDynamicCast(GetWindow(), CProjectListCtrl);
     if (pCtrl && (childId != wxACC_SELF))
@@ -289,7 +289,7 @@
 
 
 // Returns a role constant.
-wxAccStatus CProjectListCtrlAccessible::GetRole(int childId, wxAccRole* role)
+wxAccStatus CProjectListCtrlAccessible::GetRole(int childId, wxAccRole* const role) const
 {
     if (childId == wxACC_SELF)
     {
@@ -304,7 +304,7 @@
 
 
 // Returns a role constant.
-wxAccStatus CProjectListCtrlAccessible::GetState(int childId, long* state)
+wxAccStatus CProjectListCtrlAccessible::GetState(int childId, long* const state) const
 {
     if (childId == wxACC_SELF)
     {
@@ -575,14 +575,14 @@
  */
  
 bool CProjectListCtrl::Append(
-    wxString strURL,
-    wxString strTitle,
-    wxString strImage,
-    wxString strDescription,
-    bool bNvidiaGPUSupported,
-    bool bATIGPUSupported,
-    bool bMulticoreSupported,
-    bool bSupported
+    const wxString strURL,
+    const wxString strTitle,
+    const wxString strImage,
+    const wxString strDescription,
+    const bool bNvidiaGPUSupported,
+    const bool bATIGPUSupported,
+    const bool bMulticoreSupported,
+    const bool bSupported
 )
 {
     CProjectListItem* pItem = new CProjectListItem();
Index: boinc/clientgui/ProjectListCtrl.h
===================================================================
--- boinc.orig/clientgui/ProjectListCtrl.h	2011-03-17 18:51:03.000000000 +0100
+++ boinc/clientgui/ProjectListCtrl.h	2011-11-13 23:24:19.000000000 +0100
@@ -33,34 +33,34 @@
 public:
 
     wxString GetURL() const { return m_strURL ; }
-    void SetURL(wxString value) { m_strURL = value ; }
+    void SetURL(const wxString value) { m_strURL = value ; }
 
     wxString GetTitle() const { return m_strTitle ; }
-    void SetTitle(wxString value) { m_strTitle = value ; }
+    void SetTitle(const wxString value) { m_strTitle = value ; }
 
     wxString GetImage() const { return m_strImage ; }
-    void SetImage(wxString value) { m_strImage = value ; }
+    void SetImage(const wxString value) { m_strImage = value ; }
 
     wxString GetOrganization() const { return m_strOrganization ; }
-    void SetOrganization(wxString value) { m_strOrganization = value ; }
+    void SetOrganization(const wxString value) { m_strOrganization = value ; }
 
     wxString GetDescription() const { return m_strDescription ; }
-    void SetDescription(wxString value) { m_strDescription = value ; }
+    void SetDescription(const wxString value) { m_strDescription = value ; }
 
     wxString GetCategory() const { return m_strCategory ; }
-    void SetCategory(wxString value) { m_strCategory = value ; }
+    void SetCategory(const wxString value) { m_strCategory = value ; }
 
     bool IsNvidiaGPUSupported() const { return m_bNvidiaGPUSupported ; }
-    void SetNvidiaGPUSupported(bool value) { m_bNvidiaGPUSupported = value ; }
+    void SetNvidiaGPUSupported(const bool value) { m_bNvidiaGPUSupported = value ; }
 
     bool IsATIGPUSupported() const { return m_bATIGPUSupported ; }
-    void SetATIGPUSupported(bool value) { m_bATIGPUSupported = value ; }
+    void SetATIGPUSupported(const bool value) { m_bATIGPUSupported = value ; }
 
     bool IsMulticoreSupported() const { return m_bMulticoreSupported ; }
-    void SetMulticoreSupported(bool value) { m_bMulticoreSupported = value ; }
+    void SetMulticoreSupported(const bool value) { m_bMulticoreSupported = value ; }
 
     bool IsPlatformSupported() const { return m_bSupported ; }
-    void SetPlatformSupported(bool value) { m_bSupported = value ; }
+    void SetPlatformSupported(const bool value) { m_bSupported = value ; }
 
 private:
     wxString m_strURL;
@@ -100,19 +100,19 @@
     CProjectListCtrlAccessible(wxWindow* win): wxWindowAccessible(win) {}
 #endif
 
-    virtual wxAccStatus GetName(int childId, wxString* name);
-    virtual wxAccStatus HitTest(const wxPoint& pt, int* childId, wxAccessible** childObject);
-    virtual wxAccStatus GetLocation(wxRect& rect, int elementId);
-    virtual wxAccStatus GetChildCount(int* childCount);
+    virtual wxAccStatus GetName(int childId, wxString* const name) const;
+    virtual wxAccStatus HitTest(const wxPoint& pt, int* childId, wxAccessible** const childObject);
+    virtual wxAccStatus GetLocation(wxRect& rect, int elementId) const;
+    virtual wxAccStatus GetChildCount(int* const childCount) const;
     virtual wxAccStatus DoDefaultAction(int childId);
-    virtual wxAccStatus GetDescription(int childId, wxString* description);
+    virtual wxAccStatus GetDescription(int childId, wxString* const description);
 #ifndef __WXMAC__
-    virtual wxAccStatus Navigate(wxNavDir navDir, int fromId, int* toId, wxAccessible** toObject);
-    virtual wxAccStatus GetDefaultAction(int childId, wxString* actionName);
-    virtual wxAccStatus GetRole(int childId, wxAccRole* role);
-    virtual wxAccStatus GetState(int childId, long* state);
-    virtual wxAccStatus Select(int childId, wxAccSelectionFlags selectFlags);
-    virtual wxAccStatus GetSelections(wxVariant* selections);
+    virtual wxAccStatus Navigate(wxNavDir navDir, int fromId, int* toId, wxAccessible** const toObject);
+    virtual wxAccStatus GetDefaultAction(int childId, wxString* const actionName);
+    virtual wxAccStatus GetRole(int childId, wxAccRole* const role) const;
+    virtual wxAccStatus GetState(int childId, long* const state) const;
+    virtual wxAccStatus Select(int childId, wxAccSelectionFlags selectFlags) const;
+    virtual wxAccStatus GetSelections(wxVariant* const selections) const;
 #endif
 
 #ifdef __WXMAC__
@@ -166,14 +166,14 @@
 
     /// Methods
     bool Append(
-        wxString strURL,
-        wxString strTitle,
-        wxString strImage,
-        wxString strDescription,
-        bool bNvidiaGPUSupported,
-        bool bATIGPUSupported,
-        bool bMulticoreSupported,
-        bool bSupported
+        const wxString strURL,
+        const wxString strTitle,
+        const wxString strImage,
+        const wxString strDescription,
+        const bool bNvidiaGPUSupported,
+        const bool bATIGPUSupported,
+        const bool bMulticoreSupported,
+        const bool bSupported
     );
 
     CProjectListItem* GetItem( 
@@ -204,9 +204,9 @@
         m_bSupported = bSupported;
     } 
 
-    wxString GetName() { return m_strName; };
-    wxString GetURL() { return m_strURL; };
-    bool IsSupported() { return m_bSupported; };
+    wxString GetName() const { return m_strName; };
+    wxString GetURL() const { return m_strURL; };
+    bool IsSupported() const { return m_bSupported; };
 
     virtual wxNotifyEvent* Clone() const { return new ProjectListCtrlEvent(*this); }
 
Index: boinc/clientgui/DlgSelectComputer.cpp
===================================================================
--- boinc.orig/clientgui/DlgSelectComputer.cpp	2011-03-17 18:51:03.000000000 +0100
+++ boinc/clientgui/DlgSelectComputer.cpp	2011-11-13 23:45:15.000000000 +0100
@@ -65,7 +65,7 @@
 {
 }
 
-CDlgSelectComputer::CDlgSelectComputer( wxWindow* parent, bool required, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
+CDlgSelectComputer::CDlgSelectComputer( wxWindow* parent, const bool required, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
 {
     Create(parent, required, id, caption, pos, size, style);
 }
@@ -74,7 +74,7 @@
  * CDlgSelectComputer creator
  */
 
-bool CDlgSelectComputer::Create( wxWindow* parent, bool required, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
+bool CDlgSelectComputer::Create( wxWindow* parent, const bool required, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
 {
 ////@begin CDlgSelectComputer member initialisation
     m_ComputerNameCtrl = NULL;
@@ -106,7 +106,7 @@
  * Control creation for CDlgSelectComputer
  */
 
-void CDlgSelectComputer::CreateControls(bool required)
+void CDlgSelectComputer::CreateControls(const bool required)
 {    
 ////@begin CDlgSelectComputer content construction
     CDlgSelectComputer* itemDialog1 = this;
Index: boinc/clientgui/DlgSelectComputer.h
===================================================================
--- boinc.orig/clientgui/DlgSelectComputer.h	2011-03-17 18:51:03.000000000 +0100
+++ boinc/clientgui/DlgSelectComputer.h	2011-11-13 23:43:14.000000000 +0100
@@ -75,13 +75,13 @@
 public:
     /// Constructors
     CDlgSelectComputer( );
-    CDlgSelectComputer( wxWindow* parent, bool required = false, wxWindowID id = SYMBOL_CDLGSELECTCOMPUTER_IDNAME, const wxString& caption = SYMBOL_CDLGSELECTCOMPUTER_TITLE, const wxPoint& pos = SYMBOL_CDLGSELECTCOMPUTER_POSITION, const wxSize& size = SYMBOL_CDLGSELECTCOMPUTER_SIZE, long style = SYMBOL_CDLGSELECTCOMPUTER_STYLE );
+    CDlgSelectComputer( wxWindow* parent, const bool required = false, wxWindowID id = SYMBOL_CDLGSELECTCOMPUTER_IDNAME, const wxString& caption = SYMBOL_CDLGSELECTCOMPUTER_TITLE, const wxPoint& pos = SYMBOL_CDLGSELECTCOMPUTER_POSITION, const wxSize& size = SYMBOL_CDLGSELECTCOMPUTER_SIZE, long style = SYMBOL_CDLGSELECTCOMPUTER_STYLE );
 
     /// Creation
-    bool Create( wxWindow* parent, bool required = false, wxWindowID id = SYMBOL_CDLGSELECTCOMPUTER_IDNAME, const wxString& caption = SYMBOL_CDLGSELECTCOMPUTER_TITLE, const wxPoint& pos = SYMBOL_CDLGSELECTCOMPUTER_POSITION, const wxSize& size = SYMBOL_CDLGSELECTCOMPUTER_SIZE, long style = SYMBOL_CDLGSELECTCOMPUTER_STYLE );
+    bool Create( wxWindow* parent, const bool required = false, wxWindowID id = SYMBOL_CDLGSELECTCOMPUTER_IDNAME, const wxString& caption = SYMBOL_CDLGSELECTCOMPUTER_TITLE, const wxPoint& pos = SYMBOL_CDLGSELECTCOMPUTER_POSITION, const wxSize& size = SYMBOL_CDLGSELECTCOMPUTER_SIZE, long style = SYMBOL_CDLGSELECTCOMPUTER_STYLE );
 
     /// Creates the controls and sizers
-    void CreateControls(bool required);
+    void CreateControls(const bool required);
 
 ////@begin CDlgSelectComputer event handler declarations
 
@@ -93,10 +93,10 @@
 ////@begin CDlgSelectComputer member function declarations
 
     wxString GetComputerName() const { return m_strComputerName ; }
-    void SetComputerName(wxString value) { m_strComputerName = value ; }
+    void SetComputerName(const wxString value) { m_strComputerName = value ; }
 
     wxString GetComputerPassword() const { return m_strComputerPassword ; }
-    void SetComputerPassword(wxString value) { m_strComputerPassword = value ; }
+    void SetComputerPassword(const wxString value) { m_strComputerPassword = value ; }
 
     /// Retrieves bitmap resources
     wxBitmap GetBitmapResource( const wxString& name );
Index: boinc/clientgui/MainDocument.cpp
===================================================================
--- boinc.orig/clientgui/MainDocument.cpp	2011-11-13 23:58:43.000000000 +0100
+++ boinc/clientgui/MainDocument.cpp	2011-11-14 01:05:10.000000000 +0100
@@ -92,7 +92,7 @@
 
 using std::string;
 
-CNetworkConnection::CNetworkConnection(CMainDocument* pDocument) :
+CNetworkConnection::CNetworkConnection(CMainDocument* const pDocument) :
     wxObject() {
     m_pDocument = pDocument;
 
@@ -117,14 +117,19 @@
 }
 
 
-int CNetworkConnection::GetLocalPassword(wxString& strPassword){
+int CNetworkConnection::GetLocalPassword(wxString& strPassword) const {
     char buf[256];
     strcpy(buf, "");
 
     FILE* f = fopen("gui_rpc_auth.cfg", "r");
     if (!f) return errno;
-    fgets(buf, 256, f);
+    char *s = fgets(buf, 256, f);
     fclose(f);
+    if ((char *) NULL == s) {
+        if (errno) return errno;
+	return EAGAIN;
+    }
+
     int n = (int)strlen(buf);
     if (n) {
         n--;
@@ -228,25 +233,25 @@
     return 0;
 }
 
-int CNetworkConnection::GetConnectedComputerName(wxString& strMachine) {
+int CNetworkConnection::GetConnectedComputerName(wxString& strMachine) const {
     strMachine = m_strConnectedComputerName;
     return 0;
 }
 
 
-int CNetworkConnection::GetConnectedComputerVersion(wxString& strVersion) {
+int CNetworkConnection::GetConnectedComputerVersion(wxString& strVersion) const {
     strVersion = m_strConnectedComputerVersion;
     return 0;
 }
 
 
-int CNetworkConnection::GetConnectingComputerName(wxString& strMachine) {
+int CNetworkConnection::GetConnectingComputerName(wxString& strMachine) const {
     strMachine = m_strNewComputerName;
     return 0;
 }
 
 
-bool CNetworkConnection::IsComputerNameLocal(const wxString& strMachine) {
+bool CNetworkConnection::IsComputerNameLocal(const wxString& strMachine) const {
     static wxString strHostName = wxEmptyString;
     static wxString strFullHostName = wxEmptyString;
 
@@ -336,7 +341,7 @@
 }
 
 
-void CNetworkConnection::SetStateSuccess(wxString& strComputer, wxString& strComputerPassword) {
+void CNetworkConnection::SetStateSuccess(const wxString& strComputer, const wxString& strComputerPassword) {
     CBOINCBaseFrame* pFrame = wxGetApp().GetFrame();
     if (pFrame && !m_bFrameShutdownDetected) {
         wxASSERT(wxDynamicCast(pFrame, CBOINCBaseFrame));
@@ -671,35 +676,35 @@
 }
 
 
-int CMainDocument::GetConnectedComputerName(wxString& strMachine) {
+int CMainDocument::GetConnectedComputerName(wxString& strMachine) const {
     m_pNetworkConnection->GetConnectedComputerName(strMachine);
     return 0;
 }
 
 
-int CMainDocument::GetConnectedComputerVersion(wxString& strVersion) {
+int CMainDocument::GetConnectedComputerVersion(wxString& strVersion) const {
     m_pNetworkConnection->GetConnectedComputerVersion(strVersion);
     return 0;
 }
 
 
-int CMainDocument::GetConnectingComputerName(wxString& strMachine) {
+int CMainDocument::GetConnectingComputerName(wxString& strMachine) const {
     m_pNetworkConnection->GetConnectingComputerName(strMachine);
     return 0;
 }
 
 
-bool CMainDocument::IsComputerNameLocal(const wxString strMachine) {
+bool CMainDocument::IsComputerNameLocal(const wxString strMachine) const {
     return m_pNetworkConnection->IsComputerNameLocal(strMachine);
 }
 
 
-bool CMainDocument::IsConnected() {
+bool CMainDocument::IsConnected() const {
     return m_pNetworkConnection->IsConnected();
 }
 
 
-bool CMainDocument::IsReconnecting() {
+bool CMainDocument::IsReconnecting() const {
     return m_pNetworkConnection->IsReconnecting();
 }
 
@@ -1312,7 +1317,7 @@
 }
 
 
-int CMainDocument::GetProjectCount() {
+int CMainDocument::GetProjectCount() /* not const */ {
     int iCount = -1;
 
     CachedProjectStatusUpdate();
@@ -1484,7 +1489,7 @@
     return pResult;
 }
 
-int CMainDocument::GetWorkCount() {
+int CMainDocument::GetWorkCount() /* not const */ {
     int iCount = -1;
     
     CachedResultsStatusUpdate();
@@ -1497,7 +1502,7 @@
 }
 
 
-int CMainDocument::WorkSuspend(char* url, char* name) {
+int CMainDocument::WorkSuspend(const char* const url, const char* const name) {
     int iRetVal = 0;
 
     RESULT* pStateResult = state.lookup_result(url, name);
@@ -1511,7 +1516,7 @@
 }
 
 
-int CMainDocument::WorkResume(char* url, char* name) {
+int CMainDocument::WorkResume(const char* const url, const char* const name) {
     int iRetVal = 0;
 
     RESULT* pStateResult = state.lookup_result(url, name);
@@ -1527,7 +1532,7 @@
 
 // If the graphics application for the current task is already 
 // running, return a pointer to its RUNNING_GFX_APP struct.
-RUNNING_GFX_APP* CMainDocument::GetRunningGraphicsApp(RESULT* result, int slot)
+RUNNING_GFX_APP* CMainDocument::GetRunningGraphicsApp(const RESULT* const result, int slot)
 {
     bool exited = false;
     std::vector<RUNNING_GFX_APP>::iterator gfx_app_iter;
@@ -1758,7 +1763,7 @@
 }
 
 
-int CMainDocument::WorkAbort(char* url, char* name) {
+int CMainDocument::WorkAbort(const char* const url, const char* const name) {
     int iRetVal = 0;
 
     RESULT* pStateResult = state.lookup_result(url, name);
@@ -1884,7 +1889,7 @@
 }
 
 
-int CMainDocument::GetUnreadNoticeCount() {
+int CMainDocument::GetUnreadNoticeCount() const {
     int iCount = 0;
     if (!notices.notices.empty()) {
         for (unsigned int i = 0; i < notices.notices.size(); i++) { 
@@ -2311,7 +2316,7 @@
 }
 
 
-int CMainDocument::GetSimpleProjectCount() {
+int CMainDocument::GetSimpleProjectCount() /* not const */ {
     int iCount = -1;
 
     CachedSimpleGUIUpdate();
@@ -2324,7 +2329,7 @@
 }
 
 
-int CMainDocument::GetSimpleGUIWorkCount() {
+int CMainDocument::GetSimpleGUIWorkCount() /* not const */ {
     int iCount = 0;
     unsigned int i = 0;
 
@@ -2357,7 +2362,7 @@
     return _("unknown reason");
 }
 
-wxString result_description(RESULT* result, bool show_resources) {
+wxString result_description(const RESULT* const result, bool show_resources) {
     CMainDocument* doc = wxGetApp().GetDocument();
     PROJECT* project;
     CC_STATUS       status;
Index: boinc/clientgui/MainDocument.h
===================================================================
--- boinc.orig/clientgui/MainDocument.h	2011-07-24 19:39:09.000000000 +0200
+++ boinc/clientgui/MainDocument.h	2011-11-14 01:21:54.000000000 +0100
@@ -69,11 +69,11 @@
     void           ForceDisconnect() { m_bForceReconnect = false; m_bReconnectOnError = false; m_bConnectEvent = false; SetStateDisconnected(); };
     void           ForceReconnect() { m_bForceReconnect = true; SetStateDisconnected(); };
     int            FrameShutdownDetected();
-    int            GetConnectedComputerName(wxString& strMachine);
-    int            GetConnectedComputerVersion(wxString& strVersion);
-    int            GetConnectingComputerName(wxString& strMachine);
-    bool           IsComputerNameLocal(const wxString& strMachine);
-    int            GetLocalPassword(wxString& strPassword);
+    int            GetConnectedComputerName(wxString& strMachine) const;
+    int            GetConnectedComputerVersion(wxString& strVersion) const;
+    int            GetConnectingComputerName(wxString& strMachine) const;
+    bool           IsComputerNameLocal(const wxString& strMachine) const;
+    int            GetLocalPassword(wxString& strPassword) const;
     int SetComputer(
         const wxChar* szComputer, const int iPort, const wxChar* szPassword,
         const bool bUseDefaultPassword
@@ -81,7 +81,7 @@
     void           SetStateError();
     void           SetStateErrorAuthentication();
     void           SetStateReconnecting();
-    void           SetStateSuccess(wxString& strComputer, wxString& strComputerPassword);
+    void           SetStateSuccess(const wxString& strComputer, const wxString& strComputerPassword);
     void           SetStateDisconnected();
     bool           IsConnectEventSignaled() { return m_bConnectEvent; };
     bool           IsConnected() { return m_bConnected; };
@@ -149,14 +149,14 @@
     int                         FrameShutdownDetected();
     int                         CoreClientQuit();
 
-    int                         GetConnectedComputerName(wxString& strMachine);
-    int                         GetConnectedComputerVersion(wxString& strVersion);
-    int                         GetConnectingComputerName(wxString& strMachine);
-    bool                        IsComputerNameLocal(const wxString strMachine);
-    bool                        IsConnected();
-    bool                        IsReconnecting();
+    int                         GetConnectedComputerName(wxString& strMachine) const;
+    int                         GetConnectedComputerVersion(wxString& strVersion) const;
+    int                         GetConnectingComputerName(wxString& strMachine) const;
+    bool                        IsComputerNameLocal(const wxString strMachine) const;
+    bool                        IsConnected() const;
+    bool                        IsReconnecting() const;
 
-    int                         GetCoreClientStatus(CC_STATUS&, bool bForce = false);
+    int                         GetCoreClientStatus(CC_STATUS&, bool bForce = false) /* not const */;
     int                         SetActivityRunMode(int iMode, int iTimeout);
     int                         SetGPURunMode(int iMode, int iTimeout);
     int                         SetNetworkRunMode(int iMode, int iTimeout);
@@ -227,7 +227,7 @@
 	PROJECT* project(char* url);
     float                       m_fProjectTotalResourceShare;
 
-    int                         GetProjectCount();
+    int                         GetProjectCount() /* not const */;
 
     int                         ProjectNoMoreWork(int iIndex);
     int                         ProjectAllowMoreWork(int iIndex);
@@ -247,7 +247,7 @@
     double                      m_fResultsRPCExecutionTime;
     wxDateTime                  m_dtKillInactiveGfxTimestamp;
     std::vector<RUNNING_GFX_APP> m_running_gfx_apps;
-    RUNNING_GFX_APP*            GetRunningGraphicsApp(RESULT* result, int slot);
+    RUNNING_GFX_APP*            GetRunningGraphicsApp(const RESULT* const result, int slot);
     void                        KillAllRunningGraphicsApps();
     void                        KillInactiveGraphicsApps();
 #ifdef _WIN32
@@ -265,13 +265,13 @@
     RESULT*                     result(unsigned int);
     RESULT*                     result(const wxString& name, const wxString& project_url);
 
-    int                         GetWorkCount();
+    int                         GetWorkCount() /* not const */;
 
-    int                         WorkSuspend(char* url, char* name);
-    int                         WorkResume(char* url, char* name);
-    int                         WorkShowGraphics(RESULT* result);
-    int                         WorkAbort(char* url, char* name);
-    CC_STATE*                   GetState() { return &state; };
+    int                         WorkSuspend(const char* const url, const char* const name);
+    int                         WorkResume(const char* const url, const char* const name);
+    int                         WorkShowGraphics(RESULT* const result);
+    int                         WorkAbort(const char* const url, const char* const name);
+    CC_STATE*                   GetState() { return &state; } ;
 
 
     //
@@ -291,8 +291,8 @@
     NOTICE*                     notice(unsigned int);
     int                         CachedNoticeUpdate();
 
-    int                         GetNoticeCount();
-    int                         GetUnreadNoticeCount();
+    int                         GetNoticeCount() /* not const */;
+    int                         GetUnreadNoticeCount() const;
 
     void                        SaveUnreadNoticeInfo();
     void                        RestoreUnreadNoticeInfo();
@@ -315,7 +315,7 @@
     MESSAGE*                    message(unsigned int);
     int                         CachedMessageUpdate();
 
-    int                         GetMessageCount();
+    int                         GetMessageCount() /* not const */;
 
     int                         ResetMessageState();
 
@@ -337,7 +337,7 @@
     FILE_TRANSFER*              file_transfer(unsigned int);
     FILE_TRANSFER*              file_transfer(const wxString& fileName, const wxString& project_url);
 
-    int                         GetTransferCount();
+    int                         GetTransferCount() /* not const */;
 
     int                         TransferRetryNow(int iIndex);
     int                         TransferRetryNow(const wxString& fileName, const wxString& project_url);
@@ -372,7 +372,7 @@
     PROJECT*                    statistic(unsigned int);
     int                         m_iGet_statistics_rpc_result;
 
-    int                         GetStatisticsCount();
+    int                         GetStatisticsCount() /* not const */;
 	
 
 	//
@@ -399,13 +399,13 @@
 public:
     ACCT_MGR_INFO               ami;
     ACCT_MGR_INFO               async_ami_buf;
-    int                         GetSimpleProjectCount();
-    int                         GetSimpleGUIWorkCount();
+    int                         GetSimpleProjectCount() /* not const */;
+    int                         GetSimpleGUIWorkCount() /* not const */;
 
 };
 
 extern wxString suspend_reason_wxstring(int reason);
-extern wxString result_description(RESULT*, bool show_resources=true);
+extern wxString result_description(const RESULT *const, bool show_resources=true);
 extern wxString process_client_message(const char*);
 
 #ifdef SANDBOX
Index: boinc/clientgui/sg_TaskCommandPopup.cpp
===================================================================
--- boinc.orig/clientgui/sg_TaskCommandPopup.cpp	2011-07-24 19:39:09.000000000 +0200
+++ boinc/clientgui/sg_TaskCommandPopup.cpp	2011-11-14 01:08:13.000000000 +0100
@@ -284,7 +284,7 @@
 
 // CMainDocument::state.lookup_result() does not yield current scheduler_state; 
 // we must use CMainDocument::result() for that.
-RESULT* CSimpleTaskPopupButton::lookup_result(char* url, char* name) {
+RESULT* CSimpleTaskPopupButton::lookup_result(const char* const url, const char* const name) {
     CMainDocument* pDoc     = wxGetApp().GetDocument();
 
     wxASSERT(pDoc);
Index: boinc/clientgui/sg_TaskCommandPopup.h
===================================================================
--- boinc.orig/clientgui/sg_TaskCommandPopup.h	2011-07-24 19:39:09.000000000 +0200
+++ boinc/clientgui/sg_TaskCommandPopup.h	2011-11-14 01:07:28.000000000 +0100
@@ -44,7 +44,7 @@
         void OnTaskSuspendResume(wxCommandEvent& event);
         void OnTaskAbort(wxCommandEvent& event);
         void OnTaskShowProperties(wxCommandEvent& event);
-        RESULT* lookup_result(char* url, char* name);
+        RESULT* lookup_result(const char* const url, const char* const name);
         
 	protected:
         wxMenu*                     m_TaskCommandPopUpMenu;
Index: boinc/lib/gui_rpc_client.h
===================================================================
--- boinc.orig/lib/gui_rpc_client.h	2011-10-30 00:27:06.000000000 +0200
+++ boinc/lib/gui_rpc_client.h	2011-11-14 01:15:55.000000000 +0100
@@ -385,13 +385,13 @@
     CC_STATE();
     ~CC_STATE();
 
-    PROJECT* lookup_project(char* url);
-    APP* lookup_app(PROJECT*, char* name);
-    APP_VERSION* lookup_app_version(PROJECT*, APP*, int, char* plan_class);
-    APP_VERSION* lookup_app_version_old(PROJECT*, APP*, int);
-    WORKUNIT* lookup_wu(PROJECT*, char* name);
-    RESULT* lookup_result(PROJECT*, char* name);
-    RESULT* lookup_result(char* url, char* name);
+    PROJECT* lookup_project(const char* const url);
+    APP* lookup_app(const PROJECT* const, const char* const name);
+    APP_VERSION* lookup_app_version(const PROJECT* const, const APP* const, int, const char* const plan_class);
+    APP_VERSION* lookup_app_version_old(const PROJECT* const, const APP* const, int);
+    WORKUNIT* lookup_wu(const PROJECT* const, const char* const name);
+    RESULT* lookup_result(const PROJECT* const, const char* const name);
+    RESULT* lookup_result(const char* const url, const char* const name);
 
     void print();
     void clear();
Index: boinc/lib/gui_rpc_client_ops.cpp
===================================================================
--- boinc.orig/lib/gui_rpc_client_ops.cpp	2011-11-13 17:47:09.000000000 +0100
+++ boinc/lib/gui_rpc_client_ops.cpp	2011-11-14 01:14:41.000000000 +0100
@@ -908,7 +908,7 @@
     have_ati = false;
 }
 
-PROJECT* CC_STATE::lookup_project(char* url) {
+PROJECT* CC_STATE::lookup_project(const char* const url) {
     unsigned int i;
     for (i=0; i<projects.size(); i++) {
         if (!strcmp(projects[i]->master_url, url)) return projects[i];
@@ -916,7 +916,7 @@
     return 0;
 }
 
-APP* CC_STATE::lookup_app(PROJECT* project, char* name) {
+APP* CC_STATE::lookup_app(const PROJECT* const project, const char* const name) {
     unsigned int i;
     for (i=0; i<apps.size(); i++) {
         if (apps[i]->project != project) continue;
@@ -926,7 +926,7 @@
 }
 
 APP_VERSION* CC_STATE::lookup_app_version(
-    PROJECT* project, APP* app, int version_num, char* plan_class
+    const PROJECT* const project, const APP* const app, const int version_num, const char* const plan_class
 ) {
     unsigned int i;
     for (i=0; i<app_versions.size(); i++) {
@@ -940,7 +940,7 @@
 }
 
 APP_VERSION* CC_STATE::lookup_app_version_old(
-    PROJECT* project, APP* app, int version_num
+    const PROJECT* const project, const APP* const app, const int version_num
 ) {
     unsigned int i;
     for (i=0; i<app_versions.size(); i++) {
@@ -952,7 +952,7 @@
     return 0;
 }
 
-WORKUNIT* CC_STATE::lookup_wu(PROJECT* project, char* name) {
+WORKUNIT* CC_STATE::lookup_wu(const PROJECT* const project, const char* const name) {
     unsigned int i;
     for (i=0; i<wus.size(); i++) {
         if (wus[i]->project != project) continue;
@@ -961,7 +961,7 @@
     return 0;
 }
 
-RESULT* CC_STATE::lookup_result(PROJECT* project, char* name) {
+RESULT* CC_STATE::lookup_result(const PROJECT* const project, const char* const name) {
     unsigned int i;
     for (i=0; i<results.size(); i++) {
         if (results[i]->project != project) continue;
@@ -970,7 +970,7 @@
     return 0;
 }
 
-RESULT* CC_STATE::lookup_result(char* url, char* name) {
+RESULT* CC_STATE::lookup_result(const char* const url, const char* const name) {
     unsigned int i;
     for (i=0; i<results.size(); i++) {
         if (strcmp(results[i]->project->master_url, url)) continue;
