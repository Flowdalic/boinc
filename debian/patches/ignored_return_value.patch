Index: boinc/api/gutil.cpp
===================================================================
--- boinc.orig/api/gutil.cpp	2012-08-26 19:16:06.793748659 +0200
+++ boinc/api/gutil.cpp	2012-08-26 19:17:25.488681284 +0200
@@ -553,32 +553,62 @@
 //
 int read_ppm_file(const char* name, int& w, int& h, unsigned char** arrayp) {
     FILE* f;
-    char buf[256];
+    char buf[512];
     char img_type;
     unsigned char* array;
     int i;
+    char *s=NULL;
 
     f = boinc_fopen(name, "rb");
     if (!f) return -1;
-    do {fgets(buf, 256, f);} while (buf[0] == '#');
-    if (buf[0] != 'P') {
+    while(NULL != (s=fgets(buf, sizeof(buf), f)) && buf[0] == '#') ;
+    if (NULL == s || buf[0] != 'P') {
+        fclose(f);
         return -1;
     }
     img_type = buf[1];
-    do {fgets(buf, 256, f);} while (buf[0] == '#');
-    sscanf(buf, "%d %d", &w, &h);
-    do {fgets(buf, 256, f);} while (buf[0] == '#');
+    do {s=fgets(buf, sizeof(buf), f);} while (NULL != s && buf[0] == '#');
+    if (NULL == s) {
+        fclose(f);
+        return -1;
+    }
+    int bs = sscanf(buf, "%d %d", &w, &h);
+    if (bs < 2) {
+        fclose(f);
+        fprintf(stderr,"E read_ppm_file: read only %d of w and h in %s",bs,name);
+        return -1;
+    }
+    if (w<0 || h<0) {
+        fclose(f);
+        fprintf(stderr,"E read_ppm_file: w=%d<0 or h=%d<0\n",w,h);
+        return -1;
+    }
+    do {s=fgets(buf, sizeof(buf), f);} while (NULL != s && buf[0] == '#');
+    if (NULL == s) {
+        fclose(f);
+        return -1;
+    }
     array = (unsigned char*)malloc(w*h*3);
     if (!array) return -1;
     switch(img_type) {  // TODO: pad image dimension to power of 2
     case '3':
         for (i=0; i<w*h*3; i++) {
             int x;
-            fscanf(f, "%d", &x);
+            int fs=fscanf(f, "%d", &x);
+	    if (1 != fs) {
+	        fclose(f);
+                fprintf(stderr,"E: expected scanf of 1 object, but read %d of file '%s'.\n", fs, name);
+		return -1;
+	    }
             array[i] = x;
         }
     case '6':
-        fread(array, 3, w*h, f);
+        size_t fr=fread(array, 3, w*h, f);
+	if (fr < abs(w*h)) {
+            fclose(f);
+            fprintf(stderr,"E: read %ld items in file '%s' but expected %d*%d=%d.\n", fr, name, w, h, w*h);
+	    return -1;
+	}
         break;
     }
 
