Author: Steffen Moeller <moeller@debian.org>
Description: Increased verbosity when the client does not start. Many increased buffers.

Index: boinc/client/app_start.cpp
===================================================================
--- boinc.orig/client/app_start.cpp	2012-05-03 13:42:12.000000000 +0200
+++ boinc/client/app_start.cpp	2012-05-03 13:46:54.956902823 +0200
@@ -321,7 +321,10 @@
         strcat(dir_path, "/");
         strcat(dir_path, p);
         retval = boinc_mkdir(dir_path);
-        if (retval) return retval;
+        if (retval) {
+            fprintf(stderr,"create_dirs_for_logical_name: could not create dir '%s'.\n",dir_path);
+            return retval;
+        }
         p = q+1;
     }
     return 0;
@@ -1003,6 +1006,9 @@
 #endif
         }
         sprintf(buf, "../../%s", exec_path);
+
+        char errorMsg[8000];
+        strcpy(errorMsg,"execv: ");
         if (g_use_sandbox) {
             char switcher_path[100];
             sprintf(switcher_path, "../../%s/%s",
@@ -1020,17 +1026,30 @@
             // so they must be world-readable so BOINC CLient can read them
             //
             umask(2);
+            strcat(errorMsg," switcher_path:");
+            strcat(errorMsg,switcher_path);
             retval = execv(switcher_path, argv);
         } else {
             argv[0] = buf;
+            strcat(errorMsg," buf:");
+            strcat(errorMsg,buf);
             parse_command_line(cmdline, argv+1);
+            strcat(errorMsg," cmdline:");
+            strcat(errorMsg,cmdline);
+            strcat(errorMsg," argv[1]:");
+            strcat(errorMsg,argv[1]);
+            char *cwd=get_current_dir_name();
+            strcat(errorMsg," cwd:");
+            strcat(errorMsg,cwd);
+            free(cwd);
             retval = execv(buf, argv);
         }
         msg_printf(wup->project, MSG_INTERNAL_ERROR,
             "Process creation (%s) failed: %s, errno=%d\n",
             buf, boincerror(retval), errno
         );
-        perror("execv");
+
+        perror(errorMsg);
         fflush(NULL);
         _exit(errno);
     }
Index: boinc/client/client_state.cpp
===================================================================
--- boinc.orig/client/client_state.cpp	2012-05-03 13:38:04.000000000 +0200
+++ boinc/client/client_state.cpp	2012-05-03 13:46:54.964902713 +0200
@@ -810,7 +810,7 @@
     check_suspend_network();
     if (network_suspend_reason) {
         if (!old_network_suspend_reason) {
-            char buf[256];
+            char buf[1024];
             if (network_suspended) {
                 sprintf(buf,
                     "Suspending network activity - %s",
@@ -1629,7 +1629,7 @@
 //   so that we don't try to run it again.
 //
 int CLIENT_STATE::report_result_error(RESULT& res, const char* format, ...) {
-    char buf[4096],  err_msg[4096];
+    char buf[8192],  err_msg[8192];
         // The above store 1-line messages and short XML snippets.
         // Shouldn't exceed a few hundred bytes.
     unsigned int i;
@@ -1831,7 +1831,7 @@
     vector<FILE_INFO*>::iterator fi_iter;
     FILE_INFO* fip;
     PROJECT* p;
-    char path[256];
+    char path[2048];
     int retval;
 
     reset_project(project, true);
@@ -2001,7 +2001,7 @@
 }
 
 void CLIENT_STATE::log_show_projects() {
-    char buf[256];
+    char buf[1024];
     for (unsigned int i=0; i<projects.size(); i++) {
         PROJECT* p = projects[i];
         if (p->hostid) {
Index: boinc/client/hostinfo_unix.cpp
===================================================================
--- boinc.orig/client/hostinfo_unix.cpp	2012-05-03 13:28:55.000000000 +0200
+++ boinc/client/hostinfo_unix.cpp	2012-05-03 13:46:54.972902604 +0200
@@ -220,7 +220,7 @@
       SysClass,
       NoBattery
     } method = Detect;
-    static char path[64] = "";
+    static char path[2048] = "";
 
     if (Detect == method) {
         // try APM in ProcFS
@@ -260,7 +260,7 @@
     }
     if (Detect == method) {
         // try SysFS
-        char buf[256];
+        char buf[1024];
         string ps_name;
         FILE* fsys;
 
@@ -324,7 +324,7 @@
             FILE *facpi = fopen(path, "r");
             if (!facpi) return false;
 
-            char buf[128];
+            char buf[1024];
             (void) fgets(buf, sizeof(buf), facpi);
 
             fclose(facpi);
@@ -392,13 +392,13 @@
 // See http://people.nl.linux.org/~hch/cpuinfo/ for some examples.
 //
 static void parse_cpuinfo_linux(HOST_INFO& host) {
-    char buf[1024], features[1024], model_buf[1024];
+    char buf[4096], features[4096], model_buf[4096];
     bool vendor_found=false, model_found=false;
     bool cache_found=false, features_found=false;
     bool model_hack=false, vendor_hack=false;
     int n;
     int family=-1, model=-1, stepping=-1;
-    char buf2[256];
+    char buf2[2048];
 
     FILE* f = fopen("/proc/cpuinfo", "r");
     if (!f) {
@@ -426,7 +426,7 @@
 
     host.m_cache=-1;
     strcpy(features, "");
-    while (fgets(buf, 1024, f)) {
+    while (fgets(buf, sizeof(buf), f)) {
         strip_whitespace(buf);
         if (
                 /* there might be conflicts if we dont #ifdef */
@@ -585,7 +585,7 @@
 void use_cpuid(HOST_INFO& host) {
     u_int p[4];
     int hasMMX, hasSSE, hasSSE2, hasSSE3, has3DNow, has3DNowExt = 0;
-    char capabilities[256];
+    char capabilities[1024];
 
     do_cpuid(0x0, p);
 
@@ -615,7 +615,7 @@
     if (has3DNowExt) strncat(capabilities, "3dnowext ", 9);
     if (hasMMX) strncat(capabilities, "mmx ", 4);
     strip_whitespace(capabilities);
-    char buf[1024];
+    char buf[2048];
     snprintf(buf, sizeof(buf), "%s [] [%s]",
         host.p_model, capabilities
     );
@@ -629,7 +629,7 @@
     int p_model_size = sizeof(host.p_model);
     size_t len;
 #if defined(__i386__) || defined(__x86_64__)
-    char brand_string[256];
+    char brand_string[1024];
     int family, stepping, model;
 
     len = sizeof(host.p_vendor);
@@ -656,7 +656,7 @@
         brand_string, family, model, stepping
     );
 #else       // PowerPC
-    char model[256];
+    char model[1024];
     int response = 0;
     int retval;
     len = sizeof(response);
@@ -698,7 +698,7 @@
     int32 maxStandardFunction;
     int32 maxExtendedFunction = 0;
 
-    char brand_string[256];
+    char brand_string[1024];
 
     if (get_system_info(&sys_info) != B_OK) {
         msg_printf(NULL, MSG_INTERNAL_ERROR, "Error getting Haiku system information!\n");
@@ -727,7 +727,7 @@
         maxExtendedFunction = cpuInfo.eax_0.max_eax & 0xff;
 
     if (maxExtendedFunction >=4 ) {
-        char buffer[49];
+        char buffer[49+20];
         char *name = buffer;
         int32 i;
 
@@ -794,7 +794,7 @@
 
     int32 found = 0;
     int32 i;
-    char buf[12];
+    char buf[12+20];
 
     for (i = 0; i < 32; i++) {
         if ((cpuInfo.eax_1.features & (1UL << i)) && kFeatures[i] != NULL) {
@@ -1705,10 +1705,10 @@
 #if LINUX_LIKE_SYSTEM
 bool interrupts_idle(time_t t) {
     static FILE *ifp = NULL;
-    static long irq_count[256];
+    static long irq_count[1024];
     static time_t last_irq = time(NULL);
 
-    char line[256];
+    char line[1024];
     int i = 0;
     long ccount = 0;
 
Index: boinc/lib/hostinfo.cpp
===================================================================
--- boinc.orig/lib/hostinfo.cpp	2012-05-03 13:28:55.000000000 +0200
+++ boinc/lib/hostinfo.cpp	2012-05-03 13:46:54.980902494 +0200
@@ -131,7 +131,7 @@
 int HOST_INFO::write(
     MIOFILE& out, bool include_net_info, bool include_coprocs
 ) {
-    char pv[265], pm[256], pf[1024], osn[256], osv[256];
+    char pv[512], pm[512], pf[2048], osn[512], osv[512];
     out.printf(
         "<host_info>\n"
         "    <timezone>%d</timezone>\n",
@@ -208,11 +208,11 @@
 // The following functions read and write this file.
 //
 int HOST_INFO::parse_cpu_benchmarks(FILE* in) {
-    char buf[256];
+    char buf[1024];
 
-    char* p = fgets(buf, 256, in);
+    char* p = fgets(buf, sizeof(buf), in);
     if (!p) return 0;           // Fixes compiler warning
-    while (fgets(buf, 256, in)) {
+    while (fgets(buf, sizeof(buf), in)) {
         if (match_tag(buf, "<cpu_benchmarks>"));
         else if (match_tag(buf, "</cpu_benchmarks>")) return 0;
         else if (parse_double(buf, "<p_fpops>", p_fpops)) continue;
Index: boinc/lib/hostinfo.h
===================================================================
--- boinc.orig/lib/hostinfo.h	2012-05-03 13:28:55.000000000 +0200
+++ boinc/lib/hostinfo.h	2012-05-03 13:46:54.984902440 +0200
@@ -44,7 +44,7 @@
     int p_ncpus;
     char p_vendor[256];
     char p_model[256];
-    char p_features[1024];
+    char p_features[2048];
     double p_fpops;
     double p_iops;
     double p_membw;
