Index: boinc/lib/str_replace.h
===================================================================
--- boinc.orig/lib/str_replace.h	2011-11-26 16:11:07.000000000 +0100
+++ boinc/lib/str_replace.h	2011-11-26 16:11:32.000000000 +0100
@@ -25,19 +25,19 @@
 #endif
 
 #if !HAVE_STRLCPY
-extern size_t strlcpy(char*, const char*, size_t);
+extern size_t strlcpy(char* const, const char* const, const size_t);
 #endif
 
 #if !HAVE_STRLCAT
-extern size_t strlcat(char *dst, const char *src, size_t size);
+extern size_t strlcat(char *const dst, const char *const src, const size_t size);
 #endif
 
 #if !HAVE_STRCASESTR
-extern const char *strcasestr(const char *s1, const char *s2);
+extern const char *strcasestr(const char *const s1, const char *const s2);
 #endif
 
 #if !HAVE_STRCASECMP
-inline int strcasecmp(const char* s1, const char* s2) {
+inline int strcasecmp(const char* const s1, const char* const s2) {
     while (*s1 && *s2) {
         char c1 = tolower(*s1++);
         char c2 = tolower(*s2++);
Index: boinc/lib/str_util.cpp
===================================================================
--- boinc.orig/lib/str_util.cpp	2011-11-26 16:11:07.000000000 +0100
+++ boinc/lib/str_util.cpp	2011-11-26 16:11:32.000000000 +0100
@@ -53,7 +53,7 @@
 // see http://www.gratisoft.us/todd/papers/strlcpy.html
 //
 #if !HAVE_STRLCPY
-size_t strlcpy(char *dst, const char *src, size_t size) {
+size_t strlcpy(char *const dst, const char *const src, const size_t size) {
     size_t ret = strlen(src);
 
     if (size) {
@@ -67,7 +67,7 @@
 #endif
 
 #if !HAVE_STRLCAT
-size_t strlcat(char *dst, const char *src, size_t size) {
+size_t strlcat(char *const dst, const char *const src, const size_t size) {
     size_t dst_len = strlen(dst);
     size_t src_len = strlen(src);
 
@@ -82,7 +82,7 @@
 #endif // !HAVE_STRLCAT
 
 #if !HAVE_STRCASESTR
-const char *strcasestr(const char *s1, const char *s2) {
+const char *strcasestr(const char *const s1, const char *const s2) {
     char *needle=NULL, *haystack=NULL, *p=NULL;
     bool need_free = false;
     // Is alloca() really less likely to fail with out of memory error
@@ -152,7 +152,7 @@
 // unit of time division used
 // smallest_timescale: 0=seconds, 1=minutes, 2=hours, 3=days, 4=years
 //
-int ndays_to_string (double x, int smallest_timescale, char *buf) {
+int ndays_to_string (const double x, const int smallest_timescale, char *const buf) {
     double years, days, hours, minutes, seconds;
     char year_buf[64], day_buf[16], hour_buf[16], min_buf[16], sec_buf[16];
 
@@ -214,7 +214,7 @@
 // Convert nbytes into a string.  If total_bytes is non-zero,
 // convert the two into a fractional display (i.e. 4/16 KB)
 //
-void nbytes_to_string(double nbytes, double total_bytes, char* str, int len) {
+void nbytes_to_string(const double nbytes, const double total_bytes, char* const str, int const len) {
     char buf[256];
     double xTera = (1024.0*1024.0*1024.0*1024.0);
     double xGiga = (1024.0*1024.0*1024.0);
@@ -311,7 +311,7 @@
 
 // remove whitespace from start and end of a string
 //
-void strip_whitespace(char *str) {
+void strip_whitespace(char *const str) {
     int n;
     while (1) {
         if (!str[0]) break;
@@ -345,7 +345,7 @@
     }
 }
 
-char* time_to_string(double t) {
+char* time_to_string(const double t) {
     static char buf[100];
     time_t x = (time_t)t;
     struct tm* tm = localtime(&x);
@@ -372,7 +372,7 @@
     return buf;
 }
 
-string timediff_format(double diff) {
+string timediff_format(const double diff) {
     char buf[256];
     int tdiff = (int)diff;
 
@@ -408,7 +408,7 @@
     return buf;
 }
 
-void mysql_timestamp(double dt, char* p) {
+void mysql_timestamp(const double dt, char* const p) {
     struct tm* tmp;
     time_t t = (time_t)dt;
     tmp = localtime(&t);     // MySQL timestamps are in local time
@@ -421,7 +421,7 @@
 // Return a text-string description of a given error.
 // Must be kept consistent with error_numbers.h
 //
-const char* boincerror(int which_error) {
+const char* boincerror(const int which_error) {
     switch (which_error) {
         case BOINC_SUCCESS: return "Success";
         case ERR_SELECT: return "select() failed";
@@ -562,7 +562,7 @@
     return buf;
 }
 
-const char* network_status_string(int n) {
+const char* network_status_string(const int n) {
 	switch (n) {
 	case NETWORK_STATUS_ONLINE: return "online";
 	case NETWORK_STATUS_WANT_CONNECTION: return "need connection";
@@ -572,7 +572,7 @@
 	}
 }
 
-const char* rpc_reason_string(int reason) {
+const char* rpc_reason_string(const int reason) {
     switch (reason) {
     case RPC_REASON_USER_REQ: return "Requested by user";
     case RPC_REASON_NEED_WORK: return "To fetch work";
@@ -585,7 +585,7 @@
     }
 }
 
-const char* suspend_reason_string(int reason) {
+const char* suspend_reason_string(const int reason) {
     switch (reason) {
     case SUSPEND_REASON_BATTERIES: return "on batteries";
     case SUSPEND_REASON_USER_ACTIVE: return "computer is in use";
@@ -603,7 +603,7 @@
     return "unknown reason";
 }
 
-const char* run_mode_string(int mode) {
+const char* run_mode_string(const int mode) {
     switch (mode) {
     case RUN_MODE_ALWAYS: return "always";
     case RUN_MODE_AUTO: return "according to prefs";
@@ -691,8 +691,8 @@
 // target is string to replace with
 //
 int string_substitute(
-    const char* haystack, char* out, int out_len,
-    const char* needle, const char* target
+    const char* const haystack, char* const out, const int out_len,
+    const char* const needle, const char* const target
 ) {
     int i=0, j=0;
     int needle_len = (int)strlen(needle);
@@ -716,7 +716,7 @@
     return retval;
 }
 
-inline void remove_str(char* p, const char* str) {
+inline void remove_str(char* p, const char* const str) {
     size_t n = strlen(str);
     while (1) {
         p = strstr(p, str);
@@ -727,7 +727,7 @@
 
 // remove _( and ") from string
 //
-void strip_translation(char* p) {
+void strip_translation(char* const p) {
     remove_str(p, "_(\"");
     remove_str(p, "\")");
 }
Index: boinc/lib/str_util.h
===================================================================
--- boinc.orig/lib/str_util.h	2011-11-26 16:11:07.000000000 +0100
+++ boinc/lib/str_util.h	2011-11-26 16:11:32.000000000 +0100
@@ -26,17 +26,17 @@
 #include <vector>
 
 extern void strcpy_overlap(char*, const char*);
-extern int ndays_to_string(double x, int smallest_timescale, char *buf);
-extern void nbytes_to_string(double nbytes, double total_bytes, char* str, int len);
+extern int ndays_to_string(const double x, const int smallest_timescale, char *const buf);
+extern void nbytes_to_string(const double nbytes, const double total_bytes, char* const str, const int len);
 extern int parse_command_line(char*, char**);
 extern void c2x(char *what);
 extern void strip_whitespace(char *str);
 extern void strip_whitespace(std::string&);
 #define safe_strcpy(x, y) strlcpy(x, y, sizeof(x))
 #define safe_strcat(x, y) if (strlen(x)+strlen(y)<sizeof(x)) strcat(x, y)
-extern char* time_to_string(double);
+extern char* time_to_string(const double);
 extern char* precision_time_to_string(double);
-extern std::string timediff_format(double);
+extern std::string timediff_format(const double);
 
 inline bool ends_with(std::string const& s, std::string const& suffix) {
     return
@@ -62,13 +62,13 @@
 }
 
 extern int string_substitute(
-    const char* haystack, char* out, int out_len,
-    const char* needle, const char* target
+    const char* haystack, char* const out, const int out_len,
+    const char* needle, const char* const target
 );
 
 // convert UNIX time to MySQL timestamp (yyyymmddhhmmss)
 //
-extern void mysql_timestamp(double, char*);
+extern void mysql_timestamp(const double, char* const);
 
 extern const char* network_status_string(int);
 extern const char* rpc_reason_string(int);
Index: boinc/lib/proc_control.cpp
===================================================================
--- boinc.orig/lib/proc_control.cpp	2011-10-30 00:27:06.000000000 +0200
+++ boinc/lib/proc_control.cpp	2011-11-26 16:30:40.000000000 +0100
@@ -45,7 +45,7 @@
 
 using std::vector;
 
-static void get_descendants_aux(PROC_MAP& pm, int pid, vector<int>& pids) {
+static void get_descendants_aux(PROC_MAP& pm , const int pid, vector<int>& pids) {
     PROC_MAP::iterator i = pm.find(pid);
     if (i == pm.end()) return;
     PROCINFO& p = i->second;
@@ -60,7 +60,7 @@
 
 // return a list of all descendants of the given process
 //
-void get_descendants(int pid, vector<int>& pids) {
+void get_descendants(const int pid, vector<int>& pids) {
     int retval;
     PROC_MAP pm;
     pids.clear();
@@ -85,7 +85,7 @@
 //
 
 int suspend_or_resume_threads(
-    DWORD pid, DWORD calling_thread_id, bool resume
+    const DWORD pid, const DWORD calling_thread_id, const bool resume
 ) { 
     HANDLE threads, thread;
     static HMODULE hKernel32Lib = NULL;
@@ -168,7 +168,7 @@
 #else
 // Same, but if child_pid is nonzero, give it a chance to exit gracefully on Unix
 //
-void kill_descendants(int child_pid) {
+void kill_descendants(const int child_pid) {
     vector<int> descendants;
     // on Unix, ask main process nicely.
     // it descendants still exist after 10 sec, use the nuclear option
@@ -191,7 +191,7 @@
 }
 #endif
 
-void suspend_or_resume_all(vector<int>& pids, bool resume) {
+void suspend_or_resume_all(vector<int>& pids, const bool resume) {
     for (unsigned int i=0; i<pids.size(); i++) {
 #ifdef _WIN32
         suspend_or_resume_threads(pids[i], 0, resume);
@@ -206,7 +206,7 @@
 // suspend/resume the descendants of the given process
 // (or if pid==0, the calling process)
 //
-void suspend_or_resume_descendants(int pid, bool resume) {
+void suspend_or_resume_descendants(int pid, const bool resume) {
     vector<int> descendants;
     if (!pid) {
 #ifdef _WIN32
@@ -219,7 +219,7 @@
     suspend_or_resume_all(descendants, resume);
 }
 
-void suspend_or_resume_process(int pid, bool resume) {
+void suspend_or_resume_process(const int pid, const bool resume) {
 #ifdef _WIN32
     suspend_or_resume_threads(pid, 0, resume);
 #else
Index: boinc/lib/proc_control.h
===================================================================
--- boinc.orig/lib/proc_control.h	2011-10-30 00:27:06.000000000 +0200
+++ boinc/lib/proc_control.h	2011-11-26 16:31:30.000000000 +0100
@@ -23,16 +23,16 @@
 #include <windows.h>
 #endif
 
-extern void get_descendants(int pid, std::vector<int>& pids);
+extern void get_descendants(const int pid, std::vector<int>& pids);
 extern bool any_process_exists(std::vector<int>& pids);
 extern void kill_all(std::vector<int>& pids);
 #ifdef _WIN32
 extern void kill_descendants();
-extern int suspend_or_resume_threads(DWORD pid, DWORD threadid, bool resume);
+extern int suspend_or_resume_threads(const DWORD pid, const DWORD threadid, const bool resume);
 #else
-extern void kill_descendants(int child_pid=0);
+extern void kill_descendants(const int child_pid=0);
 #endif
-extern void suspend_or_resume_descendants(int pid, bool resume);
-extern void suspend_or_resume_process(int pid, bool resume);
+extern void suspend_or_resume_descendants(int pid, const bool resume);
+extern void suspend_or_resume_process(const int pid, const bool resume);
 
 #endif
Index: boinc/lib/procinfo.cpp
===================================================================
--- boinc.orig/lib/procinfo.cpp	2011-10-08 14:11:56.000000000 +0200
+++ boinc/lib/procinfo.cpp	2011-11-26 16:22:39.000000000 +0100
@@ -64,7 +64,7 @@
     }
 }
 
-static inline bool in_vector(int n, vector<int>& v) {
+static inline bool in_vector(const int n, const vector<int>& v) {
     for (unsigned int i=0; i<v.size(); i++) {
         if (n == v[i]) return true;
     }
