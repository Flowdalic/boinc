Author: Steffen Moeller <moeller@debian.org>
Description: Improving initalisation of app_init_data

Index: boinc/lib/app_ipc.cpp
===================================================================
--- boinc.orig/lib/app_ipc.cpp	2012-03-27 16:54:40.940116654 +0200
+++ boinc/lib/app_ipc.cpp	2012-03-27 18:18:24.763761557 +0200
@@ -56,12 +56,14 @@
 }
 
 APP_INIT_DATA::APP_INIT_DATA() : project_preferences(NULL) {
+    gpu_type[0]=0;
+    clear();
 }
 
 APP_INIT_DATA::~APP_INIT_DATA() {
     if (project_preferences) {
         free(project_preferences);
-        project_preferences=0;      // paranoia
+        project_preferences=NULL;      // paranoia
     }
 }
 
@@ -77,6 +79,12 @@
 }
 
 void APP_INIT_DATA::copy(const APP_INIT_DATA& a) {
+
+    clear(); // initialising values not copied, also avoiding memory leak in project_preferences
+    if (a.project_preferences) {
+        project_preferences = strdup(a.project_preferences);
+    }
+
     strcpy(app_name, a.app_name);
     strcpy(symstore, a.symstore);
     strcpy(acct_mgr_url, a.acct_mgr_url);
@@ -87,7 +95,11 @@
     strcpy(wu_name, a.wu_name);
     strcpy(result_name, a.result_name);
     strcpy(authenticator, a.authenticator);
-    memcpy(&shmem_seg_name, &a.shmem_seg_name, sizeof(SHMEM_SEG_NAME));
+#ifdef _WIN32
+    memcpy(&shmem_seg_name, &a.shmem_seg_name, sizeof(SHMEM_SEG_NAME)); // character for Windows
+#else
+    shmem_seg_name = a.shmem_seg_name;					// int for Linux
+#endif
     strcpy(gpu_type, a.gpu_type);
                 
     // use assignment for the rest, especially the classes
@@ -122,15 +134,10 @@
     ncpus                         = a.ncpus;
     checkpoint_period             = a.checkpoint_period;
     wu_cpu_time                   = a.wu_cpu_time;
-    if (a.project_preferences) {
-        project_preferences = strdup(a.project_preferences);
-    } else {
-        project_preferences = NULL;
-    }
 }
 
 int write_init_data_file(FILE* f, APP_INIT_DATA& ai) {
-    char buf[2048];
+    char buf[9192];
     fprintf(f,
         "<app_init_data>\n"
         "<major_version>%d</major_version>\n"
@@ -202,16 +209,7 @@
         "<resource_share_fraction>%f</resource_share_fraction>\n"
         "<checkpoint_period>%f</checkpoint_period>\n"
         "<fraction_done_start>%f</fraction_done_start>\n"
-        "<fraction_done_end>%f</fraction_done_end>\n"
-        "<gpu_type>%s</gpu_type>\n"
-        "<gpu_device_num>%d</gpu_device_num>\n"
-        "<gpu_opencl_dev_index>%d</gpu_opencl_dev_index>\n"
-        "<ncpus>%f</ncpus>\n"
-        "<rsc_fpops_est>%f</rsc_fpops_est>\n"
-        "<rsc_fpops_bound>%f</rsc_fpops_bound>\n"
-        "<rsc_memory_bound>%f</rsc_memory_bound>\n"
-        "<rsc_disk_bound>%f</rsc_disk_bound>\n"
-        "<computation_deadline>%f</computation_deadline>\n",
+        "<fraction_done_end>%f</fraction_done_end>\n",
         ai.slot,
         ai.wu_cpu_time,
         ai.starting_elapsed_time,
@@ -223,10 +221,22 @@
         ai.resource_share_fraction,
         ai.checkpoint_period,
         ai.fraction_done_start,
-        ai.fraction_done_end,
-        ai.gpu_type,
+        ai.fraction_done_end
+    );
+    fprintf(f,"<gpu_type>%s</gpu_type>\n", ai.gpu_type);
+    fprintf(f,
+        "<gpu_device_num>%d</gpu_device_num>\n"
+        "<gpu_opencl_dev_index>%d</gpu_opencl_dev_index>\n",
         ai.gpu_device_num,
-        ai.gpu_opencl_dev_index,
+        ai.gpu_opencl_dev_index
+    );
+    fprintf(f,
+        "<ncpus>%f</ncpus>\n"
+        "<rsc_fpops_est>%f</rsc_fpops_est>\n"
+        "<rsc_fpops_bound>%f</rsc_fpops_bound>\n"
+        "<rsc_memory_bound>%f</rsc_memory_bound>\n"
+        "<rsc_disk_bound>%f</rsc_disk_bound>\n"
+        "<computation_deadline>%f</computation_deadline>\n",
         ai.ncpus,
         ai.rsc_fpops_est,
         ai.rsc_fpops_bound,
@@ -248,20 +258,27 @@
     minor_version = 0;
     release = 0;
     app_version = 0;
-    strcpy(app_name, "");
-    strcpy(symstore, "");
-    strcpy(acct_mgr_url, "");
+
+    if (project_preferences) {
+    	free(project_preferences);
+    }
     project_preferences = NULL;
+
     userid = 0;
     teamid = 0;
     hostid = 0;
-    strcpy(user_name, "");
-    strcpy(team_name, "");
-    strcpy(project_dir, "");
-    strcpy(boinc_dir, "");
-    strcpy(wu_name, "");
-    strcpy(result_name, "");
-    strcpy(authenticator, "");
+
+    app_name[0]=0;
+    symstore[0]=0;
+    acct_mgr_url[0]=0;
+    user_name[0]=0;
+    team_name[0]=0;
+    project_dir[0]=0;
+    boinc_dir[0]=0;
+    wu_name[0]=0;
+    result_name[0]=0;
+    authenticator[0]=0;
+
     slot = 0;
     user_total_credit = 0;
     user_expavg_credit = 0;
@@ -281,12 +298,17 @@
     fraction_done_start = 0;
     fraction_done_end = 0;
     checkpoint_period = 0;
-    strcpy(gpu_type, "");
+    gpu_type[0]=0;
     gpu_device_num = 0;
     // -1 means an older version without gpu_opencl_dev_index field
     gpu_opencl_dev_index = -1;
     ncpus = 0;
-    memset(&shmem_seg_name, 0, sizeof(shmem_seg_name));
+#ifdef _WIN32
+    //memset(&shmem_seg_name, 0, sizeof(shmem_seg_name));
+    shmem_seg_name[0]=0;
+#else
+    shmem_seg_name=0;
+#endif
     wu_cpu_time = 0;
 }
 
@@ -447,7 +469,7 @@
     const char *virtual_name, char *physical_name, int len
 ) {
     FILE *fp;
-    char buf[512], *p;
+    char buf[4096], *p;
 
     if (!virtual_name) return ERR_NULL;
     strlcpy(physical_name, virtual_name, len);
@@ -480,7 +502,7 @@
 // same, std::string version
 //
 int boinc_resolve_filename_s(const char *virtual_name, string& physical_name) {
-    char buf[512], *p;
+    char buf[4096], *p;
     if (!virtual_name) return ERR_NULL;
     physical_name = virtual_name;
 #ifndef _WIN32
@@ -491,14 +513,14 @@
     FILE *fp = boinc_fopen(virtual_name, "r");
     if (!fp) return 0;
     buf[0] = 0;
-    p = fgets(buf, 512, fp);
+    p = fgets(buf, sizeof(buf), fp);
     fclose(fp);
     if (p) parse_str(buf, "<soft_link>", physical_name);
     return 0;
 }
 
 void url_to_project_dir(char* url, char* dir) {
-    char buf[256];
+    char buf[4096];
     escape_project_url(url, buf);
     sprintf(dir, "%s/%s", PROJECT_DIR, buf);
 }
Index: boinc/lib/app_ipc.h
===================================================================
--- boinc.orig/lib/app_ipc.h	2012-03-27 16:49:03.004705896 +0200
+++ boinc/lib/app_ipc.h	2012-03-27 16:54:40.980116111 +0200
@@ -193,7 +193,7 @@
 
     // info for GPU apps
     //
-    char gpu_type[64];
+    char gpu_type[512];
     int gpu_device_num;
     int gpu_opencl_dev_index;
 
